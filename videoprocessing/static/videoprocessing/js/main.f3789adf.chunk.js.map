{"version":3,"sources":["pages/tutorialsList/tutorialsList.page.jsx","components/errors/mediaNotFound.jsx","components/errors/error403.component.jsx","components/revertModal/revertModal.component.jsx","pages/dashboard/dashboard.page.jsx","App.js","serviceWorker.js","index.js"],"names":["Option","Text","columns","title","dataIndex","key","sorter","a","b","foss","localeCompare","sortDirections","tutorial","language","TutorialsListPage","props","state","tutorials","filteredTutorials","tutorialsInTable","searchFilteredTable","isLoading","isTutDisabled","fossDropdownOption","tutorialDropdownOption","searchBox","filterFosses","bind","filterTutorials","renderOptions","searchTable","handleSubmit","tut_id","lang_id","console","log","data","FormData","append","axios","post","process","then","res","history","push","pathname","search","id","catch","error","notification","message","description","response","status","statusText","onClick","value","option","all","this","setState","tuts","filter","item","type","options","Set","optionRender","map","add","Array","from","index","e","target","filteredList","booltut","toLowerCase","includes","boolfoss","boollang","filtered_tuts","fosses","langs","get","tut_obj","tutorial_detail","foss_category","name","isEdited","tutorial_id","language_id","button","onConfirm","okText","cancelText","size","icon","EditOutlined","tut","i","length","EyeOutlined","href","Item","HomeOutlined","VideoCameraOutlined","xs","sm","md","lg","xl","span","offset","level","onChange","defaultValue","style","width","disabled","allowClear","placeholder","prefix","SearchOutlined","backgroundColor","loading","dataSource","React","Component","withRouter","MediaNotFound","extra","Error403Component","subTitle","TabPane","RevertModal","revertModalVisible","revertHandleCancel","revertChunk","chunk_no","render","audio_chunk","src","controls","controlsList","history_id","className","footer","visible","onCancel","tab","oldValue","newValue","splitView","Dragger","Title","Dashboard","ref","player","togglePlayButton","playing","pauseVideo","video","chunk","selected_chunk","chunks","split","start_seconds","end_seconds","Math","floor","playedSeconds","seekTo","current_count","checksum","tutorial_name","total_count","processed_video","processed","progress_status","audio_file","uploading","selected_chunk_sub","revisionData","revisionsTableLoading","revertChunkSelected","handleChange","revertShowModal","slice","handleUpload","formData","put","fetchData","handleCancel","subtitle","AudioOutlined","changeAudioShowModal","RollbackOutlined","sutitle","start_time","setTimeout","seconds","handleOk","apiLoop","setInterval","video_data","total_chunks","clearInterval","qs","parse","location","ignoreQueryPrefix","config","accept","onRemove","beforeUpload","file","files","LoadingOutlined","align","display","justifyContent","alignItems","percent","parseInt","toUpperCase","DownloadOutlined","download","textDecoration","color","height","url","Input","active","onOk","okButtonProps","marginTop","onProgress","textAlign","shape","PauseOutlined","CaretRightOutlined","InboxOutlined","TextArea","autoSize","App","cookies","csrftoken","defaults","headers","common","exact","path","component","TutorialsListComponent","withCookies","Boolean","window","hostname","match","ReactDOM","CookiesProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f3789adf.chunk.js","sourcesContent":["import React from \"react\";\nimport axios from 'axios'\nimport {Breadcrumb, Button, Col, Divider, Input, notification, Popconfirm, Row, Select, Table, Typography} from 'antd';\nimport {EditOutlined, EyeOutlined, HomeOutlined, SearchOutlined, VideoCameraOutlined} from '@ant-design/icons'\nimport {withRouter} from \"react-router-dom\";\n\nconst {Option} = Select;\nconst {Text} = Typography\n\nconst columns = [\n    {\n        title: 'FOSS',\n        dataIndex: 'foss',\n        key: 'foss',\n        sorter: (a, b) => a.foss.localeCompare(b.foss),\n        sortDirections: ['descend', 'ascend']\n    },\n    {\n        title: 'Tutorial Name',\n        dataIndex: 'tutorial',\n        key: 'tutorial',\n        sorter: (a, b) => a.tutorial.localeCompare(b.tutorial),\n        sortDirections: ['descend', 'ascend']\n    },\n    {\n        title: 'Language',\n        dataIndex: 'language',\n        key: 'language',\n        sorter: (a, b) => a.language.localeCompare(b.language),\n        sortDirections: ['descend', 'ascend']\n    }, {\n        title: 'Edit Video',\n        dataIndex: 'button',\n        key: 'button',\n    },\n];\n\nclass TutorialsListPage extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            tutorials: [],\n            filteredTutorials: [],\n            tutorialsInTable: [],\n            searchFilteredTable: [],\n            isLoading: true,\n            isTutDisabled: true,\n            fossDropdownOption: 'All',\n            tutorialDropdownOption: 'All',\n            searchBox: ''\n        }\n        this.filterFosses = this.filterFosses.bind(this)\n        this.filterTutorials = this.filterTutorials.bind(this)\n        this.renderOptions = this.renderOptions.bind(this);\n        this.searchTable = this.searchTable.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleSubmit(tut_id, lang_id) {\n        console.log(tut_id, lang_id)\n        const data = new FormData();\n        data.append('tutorial_detail', tut_id);\n        data.append('language', lang_id);\n        axios.post(`${process.env.REACT_APP_API_URL}/process_tutorials`, data)\n            .then((res) => {\n                console.log(res.data)\n                this.props.history.push({pathname: '/dashboard', search: `id=${res.data.id}`});\n            })\n            .catch((error) => {\n                notification.error({\n                    message: 'Error Occurred',\n                    description: error.response ? `Status: ${error.response.status} \\n ${error.response.statusText}` : 'Some Error Occurred',\n                    onClick: () => {\n                        console.log('Notification Clicked!');\n                    },\n                });\n            })\n    }\n\n\n    async filterFosses(value, option) {\n        console.log(value)\n        if (value === 'All') {\n            let all = this.state.tutorials\n            console.log(all)\n\n            this.setState({\n                fossDropdownOption: 'All',\n                filteredTutorials: all,\n                isTutDisabled: true,\n                tutorialsInTable: all,\n                tutorialDropdownOption: 'All'\n            })\n        } else {\n            let tuts = this.state.tutorials\n            tuts = await tuts.filter((item) => {\n                return item.foss === value\n            })\n            console.log(tuts)\n            this.setState({\n                fossDropdownOption: value,\n                filteredTutorials: tuts,\n                isTutDisabled: false,\n                tutorialsInTable: tuts\n            })\n        }\n    }\n\n    async filterTutorials(value, option) {\n        if (value === 'All') {\n            let tuts = this.state.filteredTutorials\n            tuts = await tuts.filter((item) => {\n                return item.foss === this.state.fossDropdownOption\n            })\n            this.setState({tutorialsInTable: tuts, tutorialDropdownOption: value})\n\n        } else {\n            let tuts = this.state.filteredTutorials\n            tuts = await tuts.filter((item) => {\n                return item.tutorial === value\n            })\n            console.log(tuts)\n            this.setState({tutorialsInTable: tuts, tutorialDropdownOption: value})\n        }\n    }\n\n\n    renderOptions(type) {\n        let options = new Set()\n        let optionRender = []\n        if (type === 'foss') {\n            this.state.tutorials.map((item) => {\n                options.add(item.foss)\n            })\n        } else {\n            this.state.filteredTutorials.map((item) => {\n                options.add(item.tutorial)\n            })\n        }\n\n        options = Array.from(options)\n        options.map((item, index) => {\n            optionRender.push(<Option key={index} value={item}>{item}</Option>)\n        })\n\n        return optionRender\n\n    }\n\n    async searchTable(e) {\n        let value = e.target.value\n        let filteredList = this.state.tutorialsInTable\n        filteredList = await filteredList.filter(item => {\n            let booltut = item.tutorial.toLowerCase().includes(value.toLowerCase())\n            let boolfoss = item.foss.toLowerCase().includes(value.toLowerCase())\n            let boollang = item.language.toLowerCase().includes(value.toLowerCase())\n            return booltut || boollang || boolfoss\n        })\n        this.setState({searchFilteredTable: filteredList, searchBox: value})\n\n    }\n\n    componentDidMount() {\n        let filtered_tuts = []\n        let fosses = new Set()\n        let tutorials = new Set()\n        let langs = new Set()\n        axios.get(`${process.env.REACT_APP_API_URL}/tutorials`)\n            .then(res => {\n                let data = res.data\n                data.map((tutorial) => {\n                    let tut_obj = {};\n                    tut_obj.key = tutorial.tutorial_detail.id\n                    tut_obj.foss = tutorial.foss_category.name\n                    tut_obj.tutorial = tutorial.tutorial_detail.tutorial\n                    tut_obj.language = tutorial.language.name\n                    tut_obj.isEdited = false\n                    tut_obj.tutorial_id = tutorial.tutorial_detail.id\n                    tut_obj.language_id = tutorial.language.id\n                    tut_obj.button = <Popconfirm onConfirm={\n                        () => this.handleSubmit(\n                            tutorial.tutorial_detail.id,\n                            tutorial.language.id)\n                    } title=\"Are you sure?\" okText=\"Yes\" cancelText=\"No\">\n                        <Button size={'large'} icon={<EditOutlined/>}\n                        >Edit\n                            Video</Button></Popconfirm>\n                    filtered_tuts.push(tut_obj)\n                    fosses.add(tut_obj.foss)\n                    tutorials.add(tut_obj.tutorial)\n                    langs.add(tut_obj.language)\n                    return filtered_tuts\n                    // this.setState({tutorials: existing_tut})\n                })\n            }).then(() => {\n            axios.get(`${process.env.REACT_APP_API_URL}/process_tutorials`)\n                .then(res => {\n                    let data = res.data\n                    data.map((tut) => {\n                        console.log(tut)\n                        for (let i = 0; i < filtered_tuts.length; i++) {\n                            if (filtered_tuts[i].tutorial_id === tut.tutorial_detail && filtered_tuts[i].language_id === tut.language) {\n                                filtered_tuts[i].isEdited = true\n                                filtered_tuts[i].button =\n                                    <Button size={'large'} icon={<EyeOutlined/>} href={`#/dashboard?id=${tut.id}`}>Edit\n                                        Video</Button>\n                            }\n                        }\n                    })\n\n                })\n                .then(() => {\n                    this.setState({\n                        tutorials: filtered_tuts,\n                        isLoading: false,\n                        filteredTutorials: filtered_tuts,\n                        tutorialsInTable: filtered_tuts\n                    })\n\n\n                })\n        })\n    }\n\n    render() {\n        console.log(this.props.fosses)\n        return (\n            <div>\n                <Breadcrumb>\n                    <Breadcrumb.Item href=\"/\">\n                        <HomeOutlined/>\n                    </Breadcrumb.Item>\n                    <Breadcrumb.Item>\n                        <VideoCameraOutlined/>\n                        <span>Video Processing</span>\n                    </Breadcrumb.Item>\n                </Breadcrumb>\n                <Divider/>\n                <Row xs={2} sm={4} md={6} lg={10} xl={10}>\n                    <Col span={6} offset={1}>\n                        <Text level={4}>\n                            FOSS &nbsp; &nbsp; &nbsp;\n                        </Text>\n                        <Select\n                            value={this.state.fossDropdownOption}\n                            size='large'\n                            onChange={this.filterFosses}\n                            defaultValue=\"All\"\n                            style={{width: 120}}>\n                            <Option value='All'>All</Option>\n                            {\n                                this.renderOptions('foss')\n                            }\n                        </Select>\n                    </Col>\n                    <Col span={6}>\n                        <Text level={3}>\n                            Tutorial  &nbsp; &nbsp; &nbsp;\n                        </Text>\n                        <Select value={this.state.tutorialDropdownOption}\n                                size='large'\n                                disabled={this.state.isTutDisabled}\n                                style={{width: 120}}\n                                onChange={this.filterTutorials}>\n                            <Option value='All'>All</Option>\n                            {\n                                this.renderOptions('tutorials')\n\n                            }\n                        </Select>\n                    </Col>\n                    <Col span={10}>\n                        <Input allowClear size=\"large\" placeholder=\"Search\" prefix={<SearchOutlined/>}\n                               onChange={this.searchTable}/>\n\n                    </Col>\n                    <Col span={1}/>\n                </Row>\n                <Divider style={{backgroundColor: 'white'}}/>\n                <Table\n                    loading={this.state.isLoading}\n                    dataSource={this.state.searchBox !== '' ? this.state.searchFilteredTable : this.state.tutorialsInTable}\n                    columns={columns}/>\n            </div>\n\n\n        );\n    }\n}\n\n\nexport default withRouter(TutorialsListPage)\n","import React from 'react'\nimport {Button, Result} from \"antd\";\n\nclass MediaNotFound extends React.Component{\n    render() {\n        return(  <Result\n            status=\"warning\"\n            title=\"Media Not Found\"\n            extra={<Button type=\"primary\" href={'#'}>Back Home</Button>}\n        />)\n\n    }\n\n}\n\nexport default MediaNotFound\n","import React from 'react'\nimport {Button, Result} from \"antd\";\n\nclass Error403Component extends React.Component{\n    render() {\n        return(  <Result\n            status=\"404\"\n            title=\"404\"\n            subTitle=\"Sorry, the page you visited does not exist.\"\n            extra={<Button type=\"primary\" href={'#'}>Back Home</Button>}\n        />)\n\n    }\n\n}\n\nexport default Error403Component\n","import React from \"react\";\nimport {Button, Modal, Popconfirm, Table, Tabs} from \"antd\";\nimport ReactAudioPlayer from 'react-audio-player';\nimport ReactDiffViewer from 'react-diff-viewer';\nimport './revertModal.styles.css'\nconst {TabPane} = Tabs\n\nconst oldCode = `\nconst a = 10\nconst b = 10\nconst c = () => console.log('foo')\n\nif(a > 10) {\n  console.log('bar')\n}\n\nconsole.log('done')\n`;\nconst newCode = `\nconst a = 10\nconst boo = 10\n\nif(a === 10) {\n  console.log('bar')\n}\n`;\n\nconst RevertModal = (props) => {\n    const {revertModalVisible, revertHandleCancel, isLoading, dataSource, revertChunk, chunk_no} = props\n    const columns = [\n        {\n            title: 'Date',\n            dataIndex: 'history_date',\n            key: 'history_date',\n        },\n        {\n            title: 'Subtitle',\n            dataIndex: 'subtitle',\n            key: 'subtitle',\n        },\n        {\n            title: 'Audio',\n            dataIndex: 'audio_chunk',\n            key: 'audio_chunk',\n            render: (audio_chunk) => {\n                return (<ReactAudioPlayer\n                    src={`${process.env.REACT_APP_MEDIA_URL}/${audio_chunk}`}\n                    controls\n                    controlsList=\"nodownload\"\n                />)\n            }\n        },\n\n        {\n            title: 'Revert',\n            render: (value) => (\n                <Popconfirm onConfirm={() => revertChunk(value.history_id, chunk_no)} title=\"Are you sure?\" okText=\"Yes\"\n                            cancelText=\"No\">\n                    <Button size='middle' type=\"primary\">Revert</Button>\n                </Popconfirm>\n            )\n        },\n    ];\n    return (\n        <Modal className='revertModal' footer={null}\n               title=\"Revisions\"\n               visible={revertModalVisible}\n               onCancel={revertHandleCancel}\n               width='60%'\n\n        >\n            <Tabs size='large' type=\"card\">\n                <TabPane tab=\"Revert\" key=\"1\">\n                    <Table loading={isLoading} columns={columns} dataSource={dataSource}/>\n\n                </TabPane>\n                <TabPane tab=\"Compare\" key=\"2\">\n                    <ReactDiffViewer oldValue={oldCode} newValue={newCode} splitView={true} />\n                </TabPane>\n            </Tabs>\n\n        </Modal>\n    )\n}\n\n\nexport default RevertModal\n","import React from \"react\";\nimport {withRouter} from \"react-router-dom\";\nimport qs from 'qs'\nimport axios from 'axios'\nimport {\n    Breadcrumb,\n    Button,\n    Col,\n    Divider,\n    Input,\n    Modal,\n    notification,\n    Progress,\n    Result,\n    Row,\n    Skeleton,\n    Table,\n    Tabs,\n    Typography,\n    Upload\n} from 'antd';\nimport ReactAudioPlayer from 'react-audio-player';\nimport ReactPlayer from \"react-player\";\nimport {\n    AudioOutlined,\n    CaretRightOutlined,\n    DownloadOutlined,\n    HomeOutlined,\n    InboxOutlined,\n    LoadingOutlined,\n    PauseOutlined,\n    RollbackOutlined,\n    VideoCameraOutlined\n} from '@ant-design/icons'\nimport MediaNotFound from \"../../components/errors/mediaNotFound\";\nimport Error403Component from \"../../components/errors/error403.component\";\nimport './dashboard.page.css'\nimport RevertModal from \"../../components/revertModal/revertModal.component\";\n\nconst {Dragger} = Upload;\nconst {Title, Text} = Typography;\nconst {TabPane} = Tabs\n\n\nclass Dashboard extends React.Component {\n    warning\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: '',\n            current_count: '',\n            chunks: [],\n            status: 'loading',\n            checksum: '',\n            foss: '',\n            tutorial_name: '',\n            language: '',\n            total_count: '',\n            processed_video: '',\n            processed: false,\n            progress_status: '',\n            visible: false,\n            audio_file: '',\n            uploading: false,\n            selected_chunk: 0,\n            selected_chunk_sub: '',\n            playing: false,\n            revertModalVisible: false,\n            revisionData: [],\n            revisionsTableLoading: true,\n            revertChunkSelected: ''\n        }\n        this.handleChange = (e) => {\n            let value = e.target.value\n            this.setState({selected_chunk_sub: value});\n\n        }\n        this.revertShowModal = (chunk_no) => {\n            this.setState({revertModalVisible: true, revisionData: [], revertChunkSelected: chunk_no})\n            axios.get(`${process.env.REACT_APP_API_URL}/process_tutorials/${this.state.id}/${chunk_no}`)\n                .then((res) => {\n                    console.log(res.data.history)\n                    this.setState({revisionData: res.data.history.slice(1)})\n\n                })\n                .then(() => {\n                    this.setState({revisionsTableLoading: false})\n                })\n        }\n        this.handleUpload = () => {\n            this.setState({\n                uploading: true,\n                progress_status: 'normal',\n                status: 'Uploading'\n            });\n            const {audio_file, selected_chunk, selected_chunk_sub} = this.state;\n            console.log(audio_file)\n            const formData = new FormData();\n            formData.append('audio_chunk', audio_file);\n            formData.append('subtitle', selected_chunk_sub)\n            axios.put(`${process.env.REACT_APP_API_URL}/process_tutorials/${this.state.id}/${selected_chunk}`, formData)\n                .then(() => {\n                    this.fetchData();\n                    this.setState({uploading: false});\n                })\n                .then(() => this.handleCancel())\n        };\n\n        this.columns = [\n            {\n                title: 'Chunk No.',\n                dataIndex: 'chunk_no',\n                key: 'chunk_no',\n                width: '5%'\n\n            },\n            {\n                title: 'Audio',\n                dataIndex: 'audio_chunk',\n                key: 'audio_chunk',\n                width: '10%',\n                render: (audio_chunk) => {\n                    return (<ReactAudioPlayer\n                        src={audio_chunk}\n                        controls\n                        controlsList=\"nodownload\"\n                    />)\n                },\n            },\n            {\n                title: 'Start Time',\n                dataIndex: 'start_time',\n                key: 'start_time',\n                width: '10%',\n\n\n            },\n            {\n                title: 'End Time',\n                dataIndex: 'end_time',\n                key: 'end_time',\n                width: '10%',\n\n            },\n            {\n                title: 'Subtitle',\n                dataIndex: 'subtitle',\n                key: 'subtitle',\n                width: '55%',\n                // render: (value) => {\n                //     return (ReactHtmlParser(value))\n                // },\n                sorter: (a, b) => a.subtitle.localeCompare(b.subtitle),\n                sortDirections: ['descend', 'ascend']\n            },\n            {\n                title: 'Change Audio',\n                width: '10%',\n                render: (value) => {\n                    return (<Button icon={<AudioOutlined/>} onClick={() => this.changeAudioShowModal(value.chunk_no)}>Change\n                            Audio</Button>\n                    )\n                }\n            },\n            {\n                title: 'Revert',\n                width: '10%',\n                render: (value) => {\n                    return (<Button icon={<RollbackOutlined/>}\n                                    onClick={() => this.revertShowModal(value.chunk_no)}>Revert </Button>\n                    )\n                }\n            },\n        ];\n        this.changeAudioShowModal = (chunk) => {\n            let sutitle = this.state.chunks[chunk]['subtitle']\n            let start_time = this.state.chunks[chunk]['start_time']\n            setTimeout((chunk) => {\n                let a = start_time.split(':');\n                let seconds = (+a[0]) * 60 * 60 + (+a[1]) * 60 + (+a[2]);\n                console.log(seconds)\n                this.player.seekTo(seconds, 'seconds')\n                // this.player.showPreview()\n\n            }, 1000)\n            this.setState({\n                visible: true,\n                selected_chunk: chunk,\n                selected_chunk_sub: sutitle\n            });\n        };\n\n        this.handleOk = e => {\n            console.log(e);\n            this.setState({\n                visible: false,\n            });\n        };\n\n        this.revertHandleCancel = () => {\n            this.setState({revertModalVisible: false})\n        }\n\n        this.revertChunk = (history_id,chunk_no) => {\n            this.setState({\n                uploading: true,\n                progress_status: 'normal',\n                status: 'Reverting',\n            });\n            axios.put(`${process.env.REACT_APP_API_URL}/process_tutorials/${this.state.id}/${chunk_no}/revert/${history_id}`)\n                .then(() => {\n                    this.fetchData();\n                    this.setState({uploading: false});\n                })\n                .then(() => this.revertHandleCancel())\n        }\n\n        this.handleCancel = e => {\n\n            console.log(e);\n            this.setState({playing: false})\n            this.setState({\n                audio_file: '',\n                visible: false,\n            });\n        };\n\n        this.fetchData = () => {\n            this.setState({processed: false})\n            this.apiLoop = setInterval(() => {\n                axios.get(`${process.env.REACT_APP_API_URL}/process_tutorials/${this.state.id}`)\n                    .then((res) => {\n                        console.log(res.data)\n                        this.setState({\n                            current_count: res.data.chunks.length,\n                            chunks: res.data.chunks,\n                            total_count: res.data.video_data.total_chunks,\n                            tutorial_name: res.data.video_data.tutorial_name,\n                            language: res.data.video_data.language,\n                            foss: res.data.video_data.foss,\n                            status: res.data.video_data.status,\n                            checksum: res.data.video_data.checksum,\n                        });\n                        if (res.data.video_data.processed_video === null) {\n                            this.setState(\n                                {\n                                    'processed_video': res.data.video_data.video\n                                }\n                            )\n                        } else {\n                            this.setState({'processed_video': res.data.video_data.processed_video})\n                        }\n                        if (res.data.video_data.status === 'done' || res.data.video_data.status === 'error' || res.data.video_data.status === 'media_not_found') {\n                            clearInterval(this.apiLoop);\n                            this.setState({processed: true})\n                        }\n                    })\n                    .catch((error) => {\n                        notification.error({\n                            message: 'Error Occurred',\n                            description: error.response ? `Status: ${error.response.status} \\n ${error.response.statusText}` : 'Some Error Occurred',\n                            onClick: () => {\n                                console.log('Notification Clicked!');\n                            },\n                        });\n                        this.setState({status: 'not found', progress_status: 'exception'})\n\n                        clearInterval(this.apiLoop)\n                    })\n            }, 2000)\n\n        }\n\n\n    }\n\n    ref = player => {\n        this.player = player\n    }\n\n    togglePlayButton = () => {\n        let status = this.state.playing\n        status ? this.setState({playing: false}) : this.setState({playing: true})\n    }\n\n    pauseVideo = video => {\n        let chunk = this.state.selected_chunk\n\n        let start_time = this.state.chunks[chunk]['start_time']\n        let a = start_time.split(':');\n        let start_seconds = (+a[0]) * 60 * 60 + (+a[1]) * 60 + (+a[2]);\n\n        let end_time = this.state.chunks[chunk]['end_time']\n        a = end_time.split(':');\n        let end_seconds = (+a[0]) * 60 * 60 + (+a[1]) * 60 + (+a[2]);\n        // this.player.showPreview()\n\n\n        if (Math.floor(video.playedSeconds) === end_seconds) {\n            this.setState({playing: false})\n            this.player.seekTo(start_seconds, 'seconds')\n        }\n    }\n\n\n    componentWillMount() {\n        let id = qs.parse(this.props.location.search, {ignoreQueryPrefix: true}).id\n        this.setState({id: id})\n\n    }\n\n    componentDidMount() {\n        this.fetchData()\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.apiLoop)\n    }\n\n\n    render() {\n        const {uploading, audio_file} = this.state;\n        const config = {\n            disabled: audio_file,\n            accept: 'audio/mp3',\n            onRemove: () => this.setState({audio_file: ''}),\n            beforeUpload: file => {\n                this.setState(state => ({\n                    audio_file: file,\n                }));\n                return false;\n            },\n            name: audio_file.name,\n            files: []\n        };\n        let status = this.state.status\n        if (status === 'loading') {\n            return (\n                <Result\n                    icon={<LoadingOutlined/>}\n                    title=\"Fetching Files\"\n                />\n\n            )\n        } else if (status === 'not found') {\n            return (<Error403Component/>)\n        } else if (status === 'media_not_found') {\n            return (<MediaNotFound/>)\n        } else {\n            return (\n                <div>\n                    <Breadcrumb>\n                        <Breadcrumb.Item href=\"/\">\n                            <HomeOutlined/>\n                        </Breadcrumb.Item>\n                        <Breadcrumb.Item href=\"/videoprocessing\">\n                            <VideoCameraOutlined/>\n                            <span>Video Processing</span>\n                        </Breadcrumb.Item>\n                        <Breadcrumb.Item>\n                            <span>Dashboard</span>\n                        </Breadcrumb.Item>\n                    </Breadcrumb>\n                    <Row align=\"middle\">\n                        <Col span={4}\n                             style={{display: 'inline-flex', justifyContent: 'center', alignItems: 'center'}}>\n                            <Progress type=\"circle\"\n                                      percent={parseInt((this.state.current_count / this.state.total_count) * 100)}\n                                      status={this.state.progress_status}/>\n                        </Col>\n                        <Col style={{display: 'inline-flex', justifyContent: 'center', alignItems: 'center'}}\n                             span={4}>\n                            <Typography>\n                                <Title level={4}>Status: {this.state.status.toUpperCase()}</Title>\n                                <Title>\n                                    <Button\n                                        type=\"primary\" icon={<DownloadOutlined/>} size='large'\n                                        download='video'\n                                        href={this.state.processed_video}\n                                        style={{textDecoration: 'none', color: 'white'}}>Download\n                                        Tutorial</Button>\n\n                                </Title>\n                            </Typography>\n                        </Col>\n\n                        <Col style={{display: 'inline-flex', justifyContent: 'center', alignItems: 'center'}}\n                             span={8}>\n                            <Typography>\n                                <Title level={3}>{this.state.tutorial_name}</Title>\n                                <Title level={4}>{this.state.foss}</Title>\n                            </Typography>\n                        </Col>\n\n                        <Col style={{display: 'inline-flex', justifyContent: 'center', alignItems: 'center'}}\n                             span={8}>\n\n                            {\n                                this.state.status === 'done' ? <ReactPlayer\n\n\n                                        height={200}\n                                        url={this.state.processed_video} controls/> :\n                                    <Skeleton.Input style={{height: '200px'}} active/>\n                            }\n\n\n                        </Col>\n\n                    </Row>\n                    <Row>\n                        <Table\n                            className='data-table'\n                            dataSource={this.state.chunks}\n                            columns={this.columns}/>\n                    </Row>\n                    <Modal\n                        title=\"Change Audio\"\n                        visible={this.state.visible}\n                        onOk={this.handleOk}\n                        okButtonProps={{\n\n\n                            type: \"primary\",\n                            onClick: this.handleUpload,\n                            disabled: audio_file.length === 0,\n                            loading: uploading,\n                            style: {marginTop: 16}\n                        }\n                        }\n                        okText={uploading ? 'Uploading' : 'Start Upload'}\n                        onCancel={this.handleCancel}\n                    >\n                        <ReactPlayer\n                            controls={false}\n                            playing={this.state.playing}\n                            onProgress={this.pauseVideo}\n                            ref={this.ref}\n                            width='100%'\n                            url={this.state.processed_video}/>\n                        <br/>\n                        <div style={{textAlign: 'center'}}>\n\n                            <Button\n                                size='large'\n                                type=\"primary\"\n                                shape=\"round\"\n                                icon={this.state.playing ? <PauseOutlined/> : <CaretRightOutlined/>}\n                                onClick={this.togglePlayButton}\n                            />\n                        </div>\n\n\n                        <Divider/>\n                        <Dragger {...config}>\n                            <p className=\"ant-upload-drag-icon\">\n                                <InboxOutlined/>\n                            </p>\n                            <p className=\"ant-upload-text\">Click or drag audio to this area to upload</p>\n                        </Dragger>\n                        <Divider/>\n                        <Text>Subititle</Text>\n                        {\n                            this.state.status === 'done' ?\n                                <Input.TextArea allowClear\n                                                autoSize\n                                                value={this.state.selected_chunk_sub}\n                                                onChange={this.handleChange}\n                                />\n                                :\n                                null\n\n\n                        }\n\n                    </Modal>\n                    <RevertModal\n                        revertModalVisible={this.state.revertModalVisible}\n                        revertHandleCancel={this.revertHandleCancel}\n                        dataSource={this.state.revisionData}\n                        isLoading={this.state.revisionsTableLoading}\n                        chunk_no={this.state.revertChunkSelected}\n                        revertChunk={this.revertChunk}\n                    />\n\n                </div>\n\n            )\n        }\n    }\n\n\n}\n\nexport default withRouter(Dashboard)\n","import React from 'react';\nimport './App.css';\nimport TutorialsListComponent from \"./pages/tutorialsList/tutorialsList.page\";\nimport {Route, Switch} from 'react-router-dom';\nimport Dashboard from \"./pages/dashboard/dashboard.page\";\nimport {instanceOf} from 'prop-types';\nimport {Cookies, withCookies} from 'react-cookie';\nimport axios from \"axios\";\n\n\n\nclass App extends React.Component {\n    static propTypes = {\n        cookies: instanceOf(Cookies).isRequired\n    };\n\n\n    constructor(props) {\n        super(props);\n\n        const {cookies} = props;\n        this.state = {\n            csrftoken: cookies.get('csrftoken')\n        };\n        axios.defaults.headers.common['X-CSRFToken'] = this.state.csrftoken // for all requests\n\n    }\n\n\n    render() {\n        return (\n            <div className='App'>\n                <Switch>\n                    <Route exact path='/' component={TutorialsListComponent}/>\n                    <Route path='/dashboard' component={Dashboard}/>\n                </Switch>\n            </div>\n\n        )\n    };\n}\n\n\nexport default withCookies(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from \"react-router-dom\";\nimport {CookiesProvider} from 'react-cookie';\n\nReactDOM.render(\n    <HashRouter>\n        <CookiesProvider>\n            <App/>\n        </CookiesProvider>\n    </HashRouter>\n    ,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}