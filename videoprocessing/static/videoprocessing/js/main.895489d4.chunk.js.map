{"version":3,"sources":["pages/tutorialsList/tutorialsList.page.jsx","components/errors/mediaNotFound.jsx","components/errors/error403.component.jsx","components/revertModal/revertModal.component.jsx","pages/dashboard/dashboard.page.jsx","App.js","serviceWorker.js","index.js"],"names":["Option","Text","columns","title","dataIndex","key","sorter","a","b","foss","localeCompare","sortDirections","tutorial","language","TutorialsListPage","props","state","tutorials","filteredTutorials","tutorialsInTable","searchFilteredTable","isLoading","isTutDisabled","fossDropdownOption","tutorialDropdownOption","searchBox","filterFosses","bind","filterTutorials","renderOptions","searchTable","handleSubmit","tut_id","lang_id","console","log","data","FormData","append","axios","post","process","then","res","history","push","pathname","search","id","catch","error","notification","message","description","response","status","statusText","onClick","value","option","all","this","setState","tuts","filter","item","type","options","Set","optionRender","map","add","Array","from","index","e","target","filteredList","booltut","toLowerCase","includes","boolfoss","boollang","filtered_tuts","fosses","langs","get","tut_obj","tutorial_detail","foss_category","name","isEdited","tutorial_id","language_id","button","onConfirm","okText","cancelText","size","icon","EditOutlined","tut","i","length","EyeOutlined","href","Item","HomeOutlined","VideoCameraOutlined","xs","sm","md","lg","xl","span","offset","level","onChange","defaultValue","style","width","disabled","allowClear","placeholder","prefix","SearchOutlined","backgroundColor","loading","dataSource","React","Component","withRouter","MediaNotFound","extra","Error403Component","subTitle","TabPane","RevertModal","toggleSplitView","splitView","handleChangeCompare","subtitle","d","Date","history_date","oldValue","oldDropDownValue","toDateString","toTimeString","split","newValue","newDropDownValue","resetDropdown","revertModalVisible","revertHandleCancel","revertChunk","chunk_no","render","date","audio_chunk","src","controls","controlsList","history_id","className","footer","visible","onCancel","tab","slice","align","idx","defaultChecked","Title","Dashboard","ref","player","togglePlayButton","playing","pauseVideo","video","chunk","selected_chunk","chunks","start_seconds","end_seconds","Math","floor","playedSeconds","seekTo","current_count","checksum","tutorial_name","total_count","processed_video","processed","progress_status","audio_file","uploading","selected_chunk_sub","revisionData","revisionsTableLoading","revertChunkSelected","remove","handleChange","revertShowModal","openNotificationWithIcon","handleChangeStatus","meta","file","handleUpload","formData","put","fetchData","handleCancel","AudioOutlined","changeAudioShowModal","RollbackOutlined","sutitle","start_time","setTimeout","seconds","handleOk","apiLoop","setInterval","video_data","total_chunks","clearInterval","qs","parse","location","ignoreQueryPrefix","LoadingOutlined","display","justifyContent","alignItems","percent","parseInt","toUpperCase","DownloadOutlined","download","textDecoration","color","height","url","Input","active","onOk","okButtonProps","marginTop","onProgress","textAlign","shape","PauseOutlined","CaretRightOutlined","initialFiles","canRemove","onChangeStatus","accept","multiple","autoUpload","maxFiles","inputContent","TextArea","autoSize","App","cookies","csrftoken","defaults","headers","common","exact","path","component","TutorialsListComponent","withCookies","Boolean","window","hostname","match","ReactDOM","CookiesProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.895489d4.chunk.js","sourcesContent":["import React from \"react\";\nimport axios from 'axios'\nimport {Breadcrumb, Button, Col, Divider, Input, notification, Popconfirm, Row, Select, Table, Typography} from 'antd';\nimport {EditOutlined, EyeOutlined, HomeOutlined, SearchOutlined, VideoCameraOutlined} from '@ant-design/icons'\nimport {withRouter} from \"react-router-dom\";\n\nconst {Option} = Select;\nconst {Text} = Typography\n\nconst columns = [\n    {\n        title: 'FOSS',\n        dataIndex: 'foss',\n        key: 'foss',\n        sorter: (a, b) => a.foss.localeCompare(b.foss),\n        sortDirections: ['descend', 'ascend']\n    },\n    {\n        title: 'Tutorial Name',\n        dataIndex: 'tutorial',\n        key: 'tutorial',\n        sorter: (a, b) => a.tutorial.localeCompare(b.tutorial),\n        sortDirections: ['descend', 'ascend']\n    },\n    {\n        title: 'Language',\n        dataIndex: 'language',\n        key: 'language',\n        sorter: (a, b) => a.language.localeCompare(b.language),\n        sortDirections: ['descend', 'ascend']\n    }, {\n        title: 'Edit Video',\n        dataIndex: 'button',\n        key: 'button',\n    },\n];\n\nclass TutorialsListPage extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            tutorials: [],\n            filteredTutorials: [],\n            tutorialsInTable: [],\n            searchFilteredTable: [],\n            isLoading: true,\n            isTutDisabled: true,\n            fossDropdownOption: 'All',\n            tutorialDropdownOption: 'All',\n            searchBox: ''\n        }\n        this.filterFosses = this.filterFosses.bind(this)\n        this.filterTutorials = this.filterTutorials.bind(this)\n        this.renderOptions = this.renderOptions.bind(this);\n        this.searchTable = this.searchTable.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleSubmit(tut_id, lang_id) {\n        console.log(tut_id, lang_id)\n        const data = new FormData();\n        data.append('tutorial_detail', tut_id);\n        data.append('language', lang_id);\n        axios.post(`${process.env.REACT_APP_API_URL}/process_tutorials`, data)\n            .then((res) => {\n                console.log(res.data)\n                this.props.history.push({pathname: '/dashboard', search: `id=${res.data.id}`});\n            })\n            .catch((error) => {\n                notification.error({\n                    message: 'Error Occurred',\n                    description: error.response ? `Status: ${error.response.status} \\n ${error.response.statusText}` : 'Some Error Occurred',\n                    onClick: () => {\n                        console.log('Notification Clicked!');\n                    },\n                });\n            })\n    }\n\n\n    async filterFosses(value, option) {\n        console.log(value)\n        if (value === 'All') {\n            let all = this.state.tutorials\n            console.log(all)\n\n            this.setState({\n                fossDropdownOption: 'All',\n                filteredTutorials: all,\n                isTutDisabled: true,\n                tutorialsInTable: all,\n                tutorialDropdownOption: 'All'\n            })\n        } else {\n            let tuts = this.state.tutorials\n            tuts = await tuts.filter((item) => {\n                return item.foss === value\n            })\n            console.log(tuts)\n            this.setState({\n                fossDropdownOption: value,\n                filteredTutorials: tuts,\n                isTutDisabled: false,\n                tutorialsInTable: tuts\n            })\n        }\n    }\n\n    async filterTutorials(value, option) {\n        if (value === 'All') {\n            let tuts = this.state.filteredTutorials\n            tuts = await tuts.filter((item) => {\n                return item.foss === this.state.fossDropdownOption\n            })\n            this.setState({tutorialsInTable: tuts, tutorialDropdownOption: value})\n\n        } else {\n            let tuts = this.state.filteredTutorials\n            tuts = await tuts.filter((item) => {\n                return item.tutorial === value\n            })\n            console.log(tuts)\n            this.setState({tutorialsInTable: tuts, tutorialDropdownOption: value})\n        }\n    }\n\n\n    renderOptions(type) {\n        let options = new Set()\n        let optionRender = []\n        if (type === 'foss') {\n            this.state.tutorials.map((item) => {\n                options.add(item.foss)\n            })\n        } else {\n            this.state.filteredTutorials.map((item) => {\n                options.add(item.tutorial)\n            })\n        }\n\n        options = Array.from(options)\n        options.map((item, index) => {\n            optionRender.push(<Option key={index} value={item}>{item}</Option>)\n        })\n\n        return optionRender\n\n    }\n\n    async searchTable(e) {\n        let value = e.target.value\n        let filteredList = this.state.tutorialsInTable\n        filteredList = await filteredList.filter(item => {\n            let booltut = item.tutorial.toLowerCase().includes(value.toLowerCase())\n            let boolfoss = item.foss.toLowerCase().includes(value.toLowerCase())\n            let boollang = item.language.toLowerCase().includes(value.toLowerCase())\n            return booltut || boollang || boolfoss\n        })\n        this.setState({searchFilteredTable: filteredList, searchBox: value})\n\n    }\n\n    componentDidMount() {\n        let filtered_tuts = []\n        let fosses = new Set()\n        let tutorials = new Set()\n        let langs = new Set()\n        axios.get(`${process.env.REACT_APP_API_URL}/tutorials`)\n            .then(res => {\n                let data = res.data\n                data.map((tutorial) => {\n                    let tut_obj = {};\n                    tut_obj.key = tutorial.tutorial_detail.id\n                    tut_obj.foss = tutorial.foss_category.name\n                    tut_obj.tutorial = tutorial.tutorial_detail.tutorial\n                    tut_obj.language = tutorial.language.name\n                    tut_obj.isEdited = false\n                    tut_obj.tutorial_id = tutorial.tutorial_detail.id\n                    tut_obj.language_id = tutorial.language.id\n                    tut_obj.button = <Popconfirm onConfirm={\n                        () => this.handleSubmit(\n                            tutorial.tutorial_detail.id,\n                            tutorial.language.id)\n                    } title=\"Are you sure?\" okText=\"Yes\" cancelText=\"No\">\n                        <Button size={'large'} icon={<EditOutlined/>}\n                        >Edit\n                            Video</Button></Popconfirm>\n                    filtered_tuts.push(tut_obj)\n                    fosses.add(tut_obj.foss)\n                    tutorials.add(tut_obj.tutorial)\n                    langs.add(tut_obj.language)\n                    return filtered_tuts\n                    // this.setState({tutorials: existing_tut})\n                })\n            }).then(() => {\n            axios.get(`${process.env.REACT_APP_API_URL}/process_tutorials`)\n                .then(res => {\n                    let data = res.data\n                    data.map((tut) => {\n                        console.log(tut)\n                        for (let i = 0; i < filtered_tuts.length; i++) {\n                            if (filtered_tuts[i].tutorial_id === tut.tutorial_detail && filtered_tuts[i].language_id === tut.language) {\n                                filtered_tuts[i].isEdited = true\n                                filtered_tuts[i].button =\n                                    <Button size={'large'} icon={<EyeOutlined/>} href={`#/dashboard?id=${tut.id}`}>Edit\n                                        Video</Button>\n                            }\n                        }\n                    })\n\n                })\n                .then(() => {\n                    this.setState({\n                        tutorials: filtered_tuts,\n                        isLoading: false,\n                        filteredTutorials: filtered_tuts,\n                        tutorialsInTable: filtered_tuts\n                    })\n\n\n                })\n        })\n    }\n\n    render() {\n        console.log(this.props.fosses)\n        return (\n            <div>\n                <Breadcrumb>\n                    <Breadcrumb.Item href=\"/\">\n                        <HomeOutlined/>\n                    </Breadcrumb.Item>\n                    <Breadcrumb.Item>\n                        <VideoCameraOutlined/>\n                        <span>Video Processing</span>\n                    </Breadcrumb.Item>\n                </Breadcrumb>\n                <Divider/>\n                <Row xs={2} sm={4} md={6} lg={10} xl={10}>\n                    <Col span={6} offset={1}>\n                        <Text level={4}>\n                            FOSS &nbsp; &nbsp; &nbsp;\n                        </Text>\n                        <Select\n                            value={this.state.fossDropdownOption}\n                            size='large'\n                            onChange={this.filterFosses}\n                            defaultValue=\"All\"\n                            style={{width: 120}}>\n                            <Option value='All'>All</Option>\n                            {\n                                this.renderOptions('foss')\n                            }\n                        </Select>\n                    </Col>\n                    <Col span={6}>\n                        <Text level={3}>\n                            Tutorial  &nbsp; &nbsp; &nbsp;\n                        </Text>\n                        <Select value={this.state.tutorialDropdownOption}\n                                size='large'\n                                disabled={this.state.isTutDisabled}\n                                style={{width: 120}}\n                                onChange={this.filterTutorials}>\n                            <Option value='All'>All</Option>\n                            {\n                                this.renderOptions('tutorials')\n\n                            }\n                        </Select>\n                    </Col>\n                    <Col span={10}>\n                        <Input allowClear size=\"large\" placeholder=\"Search\" prefix={<SearchOutlined/>}\n                               onChange={this.searchTable}/>\n\n                    </Col>\n                    <Col span={1}/>\n                </Row>\n                <Divider style={{backgroundColor: 'white'}}/>\n                <Table\n                    loading={this.state.isLoading}\n                    dataSource={this.state.searchBox !== '' ? this.state.searchFilteredTable : this.state.tutorialsInTable}\n                    columns={columns}/>\n            </div>\n\n\n        );\n    }\n}\n\n\nexport default withRouter(TutorialsListPage)\n","import React from 'react'\nimport {Button, Result} from \"antd\";\n\nclass MediaNotFound extends React.Component{\n    render() {\n        return(  <Result\n            status=\"warning\"\n            title=\"Media Not Found\"\n            extra={<Button type=\"primary\" href={'#'}>Back Home</Button>}\n        />)\n\n    }\n\n}\n\nexport default MediaNotFound\n","import React from 'react'\nimport {Button, Result} from \"antd\";\n\nclass Error403Component extends React.Component{\n    render() {\n        return(  <Result\n            status=\"404\"\n            title=\"404\"\n            subTitle=\"Sorry, the page you visited does not exist.\"\n            extra={<Button type=\"primary\" href={'#'}>Back Home</Button>}\n        />)\n\n    }\n\n}\n\nexport default Error403Component\n","import React from \"react\";\nimport {Button, Divider, Modal, Popconfirm, Select, Space, Switch, Table, Tabs} from \"antd\";\nimport ReactAudioPlayer from 'react-audio-player';\nimport ReactDiffViewer from 'react-diff-viewer';\nimport './revertModal.styles.css'\n\nconst {TabPane} = Tabs\nconst {Option} = Select\n\n\nclass RevertModal extends React.Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            splitView: true,\n            oldValue: '',\n            newValue: '',\n            oldDropDownValue: 'Select a date',\n            newDropDownValue: 'Select a date'\n        }\n    }\n\n    toggleSplitView = () => {\n        this.setState({splitView: !this.state.splitView})\n    }\n\n    handleChangeCompare = (value, type) => {\n\n        console.log(value, type)\n        const subtitle = this.props.dataSource[value].subtitle\n        const d = new Date(this.props.dataSource[value].history_date)\n\n        if (type === 'old') {\n            this.setState({\n                oldValue: subtitle,\n                oldDropDownValue: `${d.toDateString()} ${d.toTimeString().split(' ')[0]}`\n            })\n\n        } else {\n            this.setState({\n                newValue: subtitle,\n                newDropDownValue: `${d.toDateString()} ${d.toTimeString().split(' ')[0]}`\n            })\n        }\n\n    }\n    resetDropdown = () => {\n        this.setState({\n            oldValue: '',\n            newValue: '',\n            oldDropDownValue: 'Select a date',\n            newDropDownValue: 'Select a date'\n        })\n    }\n\n\n    componentDidMount() {\n        const history = this.props.dataSource;\n        console.log(history)\n\n\n    }\n\n    render() {\n\n        const {revertModalVisible, revertHandleCancel, isLoading, dataSource, revertChunk, chunk_no} = this.props\n\n        const columns = [\n            {\n                title: 'Date',\n                dataIndex: 'history_date',\n                key: 'history_date',\n                render: (date) => {\n                    const d = new Date(date)\n                    const date_time = `${d.toDateString()} ${d.toTimeString().split(' ')[0]}`\n                    return date_time\n                }\n            },\n            {\n                title: 'Subtitle',\n                dataIndex: 'subtitle',\n                key: 'subtitle',\n            },\n            {\n                title: 'Audio',\n                dataIndex: 'audio_chunk',\n                key: 'audio_chunk',\n                render: (audio_chunk) => {\n                    return (<ReactAudioPlayer\n                        src={`${process.env.REACT_APP_MEDIA_URL}/${audio_chunk}`}\n                        controls\n                        controlsList=\"nodownload\"\n                    />)\n                }\n            },\n\n            {\n                title: 'Revert',\n                render: (value) => (\n                    <Popconfirm onConfirm={() => revertChunk(value.history_id, chunk_no)} title=\"Are you sure?\"\n                                okText=\"Yes\"\n                                cancelText=\"No\">\n                        <Button size='middle' type=\"primary\">Revert</Button>\n                    </Popconfirm>\n                )\n            },\n        ];\n        return (\n            <Modal className='revertModal' footer={null}\n                   title=\"Revisions\"\n                   visible={revertModalVisible}\n                   onCancel={() => {\n                       revertHandleCancel()\n                       this.resetDropdown()\n                   }}\n                   width='60%'\n\n            >\n                <Tabs size='large' type=\"card\">\n                    <TabPane tab=\"Revert\" key=\"1\">\n                        <Table loading={isLoading} columns={columns} dataSource={dataSource.slice(1)}/>\n\n                    </TabPane>\n                    <TabPane tab=\"Compare\" key=\"2\">\n                        <Space style={{width: '88%'}} size='large' align='baseline'>\n                            <Select\n                                value={this.state.oldDropDownValue}\n                                onChange={(e) => this.handleChangeCompare(e, 'old')} style={{width: 240}}>\n                                {\n                                    dataSource.map((item, idx) => {\n                                        console.log(item)\n                                        const d = new Date(item.history_date)\n                                        return (<Option\n\n                                            key={item.history_id}\n                                            value={idx}>\n                                            {`${d.toDateString()} ${d.toTimeString().split(' ')[0]}`}\n                                        </Option>)\n                                    })\n                                }\n                            </Select>\n                            With\n                            <Select\n                                value={this.state.newDropDownValue}\n                                onChange={(e) => this.handleChangeCompare(e, 'new')}\n                                style={{width: 240}}>\n                                {\n                                    dataSource.map((item, idx) => {\n                                        console.log(item)\n                                        const d = new Date(item.history_date)\n                                        return (<Option\n                                            key={item.history_id}\n                                            value={idx}>\n                                            {`${d.toDateString()} ${d.toTimeString().split(' ')[0]}`}\n                                        </Option>)\n                                    })\n                                }\n                            </Select>\n\n                        </Space>\n                        <Space style={{width: '12%'}} align='end'>\n                            Split View\n                            <Switch onChange={this.toggleSplitView} defaultChecked/> </Space>\n                        <Divider/>\n\n                        <ReactDiffViewer oldValue={this.state.oldValue} newValue={this.state.newValue}\n                                         splitView={this.state.splitView}/>\n                    </TabPane>\n                </Tabs>\n\n            </Modal>\n        )\n    }\n\n}\n\n\nexport default RevertModal\n","import React from \"react\";\nimport {withRouter} from \"react-router-dom\";\nimport qs from 'qs'\nimport axios from 'axios'\nimport {\n    Breadcrumb,\n    Button,\n    Col,\n    Divider,\n    Input,\n    Modal,\n    notification,\n    Progress,\n    Result,\n    Row,\n    Skeleton,\n    Table,\n    Typography,\n} from 'antd';\nimport ReactAudioPlayer from 'react-audio-player';\nimport ReactPlayer from \"react-player\";\nimport {\n    AudioOutlined,\n    CaretRightOutlined,\n    DownloadOutlined,\n    HomeOutlined,\n    LoadingOutlined,\n    PauseOutlined,\n    RollbackOutlined,\n    VideoCameraOutlined\n} from '@ant-design/icons'\nimport MediaNotFound from \"../../components/errors/mediaNotFound\";\nimport Error403Component from \"../../components/errors/error403.component\";\nimport './dashboard.page.css'\nimport RevertModal from \"../../components/revertModal/revertModal.component\";\nimport 'react-dropzone-uploader/dist/styles.css'\nimport Dropzone from 'react-dropzone-uploader'\n\nconst {Title, Text} = Typography;\n\n\nclass Dashboard extends React.Component {\n    warning\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: '',\n            current_count: '',\n            chunks: [],\n            status: 'loading',\n            checksum: '',\n            foss: '',\n            tutorial_name: '',\n            language: '',\n            total_count: '',\n            processed_video: '',\n            processed: false,\n            progress_status: '',\n            visible: false,\n            audio_file: '',\n            uploading: false,\n            selected_chunk: 0,\n            selected_chunk_sub: '',\n            playing: false,\n            revertModalVisible: false,\n            revisionData: [],\n            revisionsTableLoading: true,\n            revertChunkSelected: '',\n            remove: () => {\n                console.log('nothing to remove')\n            }\n        }\n        this.handleChange = (e) => {\n            let value = e.target.value\n            this.setState({selected_chunk_sub: value});\n\n        }\n        this.revertShowModal = (chunk_no) => {\n            this.setState({revertModalVisible: true, revisionData: [], revertChunkSelected: chunk_no})\n            axios.get(`${process.env.REACT_APP_API_URL}/process_tutorials/${this.state.id}/${chunk_no}`)\n                .then((res) => {\n                    console.log(res.data.history)\n                    this.setState({revisionData: res.data.history})\n\n                })\n                .then(() => {\n                    this.setState({revisionsTableLoading: false})\n                })\n        }\n        this.openNotificationWithIcon = (title, message, type) => {\n            notification[type]({\n                message: title,\n                description: message\n            });\n        };\n\n        this.handleChangeStatus = ({meta, file, remove}, status) => {\n            if (status !== 'rejected_file_type') {\n                this.setState({audio_file: file, remove: remove})\n            } else {\n                this.openNotificationWithIcon('Unsupported File', 'You can only upload .mp3 files', 'warning')\n            }\n        };\n        this.handleUpload = () => {\n            this.setState({\n                uploading: true,\n                progress_status: 'normal',\n                status: 'Uploading'\n            });\n            const {audio_file, selected_chunk, selected_chunk_sub} = this.state;\n            console.log(audio_file)\n            const formData = new FormData();\n            formData.append('audio_chunk', audio_file);\n            formData.append('subtitle', selected_chunk_sub)\n            axios.put(`${process.env.REACT_APP_API_URL}/process_tutorials/${this.state.id}/${selected_chunk}`, formData)\n                .then(() => {\n                    this.fetchData();\n                    this.setState({uploading: false});\n                })\n                .then(() => this.handleCancel())\n                .catch((error) => {\n                    console.log(error.response)\n                    this.setState({uploading: false});\n                    this.handleCancel()\n                    this.openNotificationWithIcon('Duplicate File', 'You have already uploaded this audio, Simply revert back', 'warning')\n\n                })\n        };\n\n        this.columns = [\n            {\n                title: 'Chunk No.',\n                dataIndex: 'chunk_no',\n                key: 'chunk_no',\n                width: '5%'\n\n            },\n            {\n                title: 'Audio',\n                dataIndex: 'audio_chunk',\n                key: 'audio_chunk',\n                width: '10%',\n                render: (audio_chunk) => {\n                    return (<ReactAudioPlayer\n                        src={audio_chunk}\n                        controls\n                    />)\n                },\n            },\n            {\n                title: 'Start Time',\n                dataIndex: 'start_time',\n                key: 'start_time',\n                width: '10%',\n\n\n            },\n            {\n                title: 'End Time',\n                dataIndex: 'end_time',\n                key: 'end_time',\n                width: '10%',\n\n            },\n            {\n                title: 'Subtitle',\n                dataIndex: 'subtitle',\n                key: 'subtitle',\n                width: '55%',\n                // render: (value) => {\n                //     return (ReactHtmlParser(value))\n                // },\n                sorter: (a, b) => a.subtitle.localeCompare(b.subtitle),\n                sortDirections: ['descend', 'ascend']\n            },\n            {\n                title: 'Change Audio',\n                width: '10%',\n                render: (value) => {\n                    return (<Button icon={<AudioOutlined/>} onClick={() => this.changeAudioShowModal(value.chunk_no)}>Change\n                            Audio</Button>\n                    )\n                }\n            },\n            {\n                title: 'Revert',\n                width: '10%',\n                render: (value) => {\n                    return (<Button icon={<RollbackOutlined/>}\n                                    onClick={() => this.revertShowModal(value.chunk_no)}>Revert </Button>\n                    )\n                }\n            },\n        ];\n        this.changeAudioShowModal = (chunk) => {\n            this.state.remove()\n            let sutitle = this.state.chunks[chunk]['subtitle']\n            let start_time = this.state.chunks[chunk]['start_time']\n            setTimeout((chunk) => {\n                let a = start_time.split(':');\n                let seconds = (+a[0]) * 60 * 60 + (+a[1]) * 60 + (+a[2]);\n                console.log(seconds)\n                this.player.seekTo(seconds, 'seconds')\n                // this.player.showPreview()\n\n            }, 1000)\n            this.setState({\n                visible: true,\n                selected_chunk: chunk,\n                selected_chunk_sub: sutitle\n            });\n        };\n\n        this.handleOk = e => {\n            console.log(e);\n            this.setState({\n                visible: false,\n            });\n        };\n\n        this.revertHandleCancel = () => {\n            this.setState({revertModalVisible: false})\n        }\n\n        this.revertChunk = (history_id, chunk_no) => {\n            this.setState({\n                uploading: true,\n                progress_status: 'normal',\n                status: 'Reverting',\n            });\n            axios.put(`${process.env.REACT_APP_API_URL}/process_tutorials/${this.state.id}/${chunk_no}/revert/${history_id}`)\n                .then(() => {\n                    this.fetchData();\n                    this.setState({uploading: false});\n                })\n                .then(() => this.revertHandleCancel())\n        }\n\n        this.handleCancel = e => {\n\n            console.log(e);\n            this.setState({playing: false})\n            this.setState({\n                audio_file: '',\n                visible: false,\n            });\n        };\n\n        this.fetchData = () => {\n            this.setState({processed: false})\n            this.apiLoop = setInterval(() => {\n                axios.get(`${process.env.REACT_APP_API_URL}/process_tutorials/${this.state.id}`)\n                    .then((res) => {\n                        console.log(res.data)\n                        this.setState({\n                            current_count: res.data.chunks.length,\n                            chunks: res.data.chunks,\n                            total_count: res.data.video_data.total_chunks,\n                            tutorial_name: res.data.video_data.tutorial_name,\n                            language: res.data.video_data.language,\n                            foss: res.data.video_data.foss,\n                            status: res.data.video_data.status,\n                            checksum: res.data.video_data.checksum,\n                        });\n                        if (res.data.video_data.processed_video === null) {\n                            this.setState(\n                                {\n                                    'processed_video': res.data.video_data.video\n                                }\n                            )\n                        } else {\n                            this.setState({'processed_video': res.data.video_data.processed_video})\n                        }\n                        if (res.data.video_data.status === 'done' || res.data.video_data.status === 'error' || res.data.video_data.status === 'media_not_found') {\n                            clearInterval(this.apiLoop);\n                            this.setState({processed: true})\n                        }\n                    })\n                    .catch((error) => {\n                        notification.error({\n                            message: 'Error Occurred',\n                            description: error.response ? `Status: ${error.response.status} \\n ${error.response.statusText}` : 'Some Error Occurred',\n                            onClick: () => {\n                                console.log('Notification Clicked!');\n                            },\n                        });\n                        this.setState({status: 'not found', progress_status: 'exception'})\n\n                        clearInterval(this.apiLoop)\n                    })\n            }, 2000)\n\n        }\n\n\n    }\n\n    ref = player => {\n        this.player = player\n    }\n\n    togglePlayButton = () => {\n        let status = this.state.playing\n        status ? this.setState({playing: false}) : this.setState({playing: true})\n    }\n\n    pauseVideo = video => {\n        let chunk = this.state.selected_chunk\n\n        let start_time = this.state.chunks[chunk]['start_time']\n        let a = start_time.split(':');\n        let start_seconds = (+a[0]) * 60 * 60 + (+a[1]) * 60 + (+a[2]);\n\n        let end_time = this.state.chunks[chunk]['end_time']\n        a = end_time.split(':');\n        let end_seconds = (+a[0]) * 60 * 60 + (+a[1]) * 60 + (+a[2]);\n        // this.player.showPreview()\n\n\n        if (Math.floor(video.playedSeconds) === end_seconds) {\n            this.setState({playing: false})\n            this.player.seekTo(start_seconds, 'seconds')\n        }\n    }\n\n\n    componentWillMount() {\n        let id = qs.parse(this.props.location.search, {ignoreQueryPrefix: true}).id\n        this.setState({id: id})\n\n    }\n\n    componentDidMount() {\n        this.fetchData()\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.apiLoop)\n    }\n\n\n    render() {\n        const {uploading, audio_file} = this.state;\n\n        let status = this.state.status\n        if (status === 'loading') {\n            return (\n                <Result\n                    icon={<LoadingOutlined/>}\n                    title=\"Fetching Files\"\n                />\n\n            )\n        } else if (status === 'not found') {\n            return (<Error403Component/>)\n        } else if (status === 'media_not_found') {\n            return (<MediaNotFound/>)\n        } else {\n            return (\n                <div>\n                    <Breadcrumb>\n                        <Breadcrumb.Item href=\"/\">\n                            <HomeOutlined/>\n                        </Breadcrumb.Item>\n                        <Breadcrumb.Item href=\"/videoprocessing\">\n                            <VideoCameraOutlined/>\n                            <span>Video Processing</span>\n                        </Breadcrumb.Item>\n                        <Breadcrumb.Item>\n                            <span>Dashboard</span>\n                        </Breadcrumb.Item>\n                    </Breadcrumb>\n                    <Row align=\"middle\">\n                        <Col span={4}\n                             style={{display: 'inline-flex', justifyContent: 'center', alignItems: 'center'}}>\n                            <Progress type=\"circle\"\n                                      percent={parseInt((this.state.current_count / this.state.total_count) * 100)}\n                                      status={this.state.progress_status}/>\n                        </Col>\n                        <Col style={{display: 'inline-flex', justifyContent: 'center', alignItems: 'center'}}\n                             span={4}>\n                            <Typography>\n                                <Title level={4}>Status: {this.state.status.toUpperCase()}</Title>\n                                <Title>\n                                    <Button\n                                        type=\"primary\" icon={<DownloadOutlined/>} size='large'\n                                        download='video'\n                                        href={this.state.processed_video}\n                                        style={{textDecoration: 'none', color: 'white'}}>Download\n                                        Tutorial</Button>\n\n                                </Title>\n                            </Typography>\n                        </Col>\n\n                        <Col style={{display: 'inline-flex', justifyContent: 'center', alignItems: 'center'}}\n                             span={8}>\n                            <Typography>\n                                <Title level={3}>{this.state.tutorial_name}</Title>\n                                <Title level={4}>{this.state.foss}</Title>\n                            </Typography>\n                        </Col>\n\n                        <Col style={{display: 'inline-flex', justifyContent: 'center', alignItems: 'center'}}\n                             span={8}>\n\n                            {\n                                this.state.status === 'done' ? <ReactPlayer\n\n\n                                        height={200}\n                                        url={this.state.processed_video} controls/> :\n                                    <Skeleton.Input style={{height: '200px'}} active/>\n                            }\n\n\n                        </Col>\n\n                    </Row>\n                    <Row>\n                        <Table\n                            className='data-table'\n                            dataSource={this.state.chunks}\n                            columns={this.columns}/>\n                    </Row>\n                    <Modal\n                        title=\"Change Audio\"\n                        visible={this.state.visible}\n                        onOk={this.handleOk}\n                        okButtonProps={{\n\n\n                            type: \"primary\",\n                            onClick: this.handleUpload,\n                            disabled: audio_file.length === 0,\n                            loading: uploading,\n                            style: {marginTop: 16}\n                        }\n                        }\n                        okText={uploading ? 'Uploading' : 'Start Upload'}\n                        onCancel={this.handleCancel}\n                    >\n                        <ReactPlayer\n                            controls={false}\n                            playing={this.state.playing}\n                            onProgress={this.pauseVideo}\n                            ref={this.ref}\n                            width='100%'\n                            url={this.state.processed_video}/>\n                        <br/>\n                        <div style={{textAlign: 'center'}}>\n\n                            <Button\n                                size='large'\n                                type=\"primary\"\n                                shape=\"round\"\n                                icon={this.state.playing ? <PauseOutlined/> : <CaretRightOutlined/>}\n                                onClick={this.togglePlayButton}\n                            />\n                        </div>\n\n\n                        <Divider/>\n                        <Dropzone\n                            initialFiles={[]}\n                            canRemove={false}\n                            className=\"fileUploader\"\n                            onChangeStatus={this.handleChangeStatus}\n                            accept=\".mp3\"\n                            multiple={false}\n                            autoUpload={false}\n                            maxFiles={1}\n                            inputContent=\"Drag Audio or Click to Browse\"\n                        />\n                        <Divider/>\n                        <Text>Subititle</Text>\n                        {\n                            status === 'done' ?\n                                <Input.TextArea allowClear\n                                                autoSize\n                                                value={this.state.selected_chunk_sub}\n                                                onChange={this.handleChange}\n                                />\n                                :\n                                null\n\n\n                        }\n\n                    </Modal>\n\n                    <RevertModal\n                        revertModalVisible={this.state.revertModalVisible}\n                        revertHandleCancel={this.revertHandleCancel}\n                        dataSource={this.state.revisionData}\n                        isLoading={this.state.revisionsTableLoading}\n                        chunk_no={this.state.revertChunkSelected}\n                        revertChunk={this.revertChunk}\n                    />\n\n                </div>\n\n            )\n        }\n    }\n\n\n}\n\nexport default withRouter(Dashboard)\n","import React from 'react';\nimport './App.css';\nimport TutorialsListComponent from \"./pages/tutorialsList/tutorialsList.page\";\nimport {Route, Switch} from 'react-router-dom';\nimport Dashboard from \"./pages/dashboard/dashboard.page\";\nimport {instanceOf} from 'prop-types';\nimport {Cookies, withCookies} from 'react-cookie';\nimport axios from \"axios\";\n\n\n\nclass App extends React.Component {\n    static propTypes = {\n        cookies: instanceOf(Cookies).isRequired\n    };\n\n\n    constructor(props) {\n        super(props);\n\n        const {cookies} = props;\n        this.state = {\n            csrftoken: cookies.get('csrftoken')\n        };\n        axios.defaults.headers.common['X-CSRFToken'] = this.state.csrftoken // for all requests\n\n    }\n\n\n    render() {\n        return (\n            <div className='App'>\n                <Switch>\n                    <Route exact path='/' component={TutorialsListComponent}/>\n                    <Route path='/dashboard' component={Dashboard}/>\n                </Switch>\n            </div>\n\n        )\n    };\n}\n\n\nexport default withCookies(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from \"react-router-dom\";\nimport {CookiesProvider} from 'react-cookie';\n\nReactDOM.render(\n    <HashRouter>\n        <CookiesProvider>\n            <App/>\n        </CookiesProvider>\n    </HashRouter>\n    ,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}