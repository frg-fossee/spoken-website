{"version":3,"sources":["pages/tutorialsList/tutorialsList.page.jsx","components/errors/mediaNotFound.jsx","components/errors/error403.component.jsx","components/revertModal/revertModal.component.jsx","pages/dashboard/dashboard.page.jsx","App.js","serviceWorker.js","index.js"],"names":["Option","Text","columns","title","dataIndex","key","sorter","a","b","foss","localeCompare","sortDirections","tutorial","language","TutorialsListPage","props","state","tutorials","filteredTutorials","tutorialsInTable","searchFilteredTable","isLoading","isTutDisabled","fossDropdownOption","tutorialDropdownOption","searchBox","filterFosses","bind","filterTutorials","renderOptions","searchTable","handleSubmit","tut_id","lang_id","console","log","data","FormData","append","axios","post","process","then","res","history","push","pathname","search","id","catch","error","notification","message","description","response","status","statusText","onClick","value","option","all","this","setState","tuts","filter","item","type","options","Set","optionRender","map","add","Array","from","index","e","target","filteredList","booltut","toLowerCase","includes","boolfoss","boollang","filtered_tuts","fosses","langs","get","tut_obj","tutorial_detail","foss_category","name","isEdited","tutorial_id","language_id","button","onConfirm","okText","cancelText","size","icon","EditOutlined","tut","i","length","EyeOutlined","href","Item","HomeOutlined","VideoCameraOutlined","xs","sm","md","lg","xl","span","offset","level","onChange","defaultValue","style","width","disabled","allowClear","placeholder","prefix","SearchOutlined","backgroundColor","loading","dataSource","React","Component","withRouter","MediaNotFound","extra","Error403Component","subTitle","TabPane","RevertModal","toggleSplitView","splitView","handleChangeCompare","subtitle","Date","history_date","oldValue","oldDropDownValue","newValue","newDropDownValue","resetDropdown","revertModalVisible","revertHandleCancel","revertChunk","chunk_no","render","text","record","date","d","toDateString","toTimeString","split","audio_chunk","src","controls","controlsList","history_id","className","footer","visible","onCancel","tab","align","idx","defaultChecked","Title","Dashboard","ref","player","togglePlayButton","playing","pauseVideo","video","chunk","selected_chunk","chunks","start_seconds","end_seconds","Math","floor","playedSeconds","seekTo","startRecording","stopRecording","onSave","blobObject","File","blob","file","downloadURL","blobURL","audio_file","current_count","checksum","tutorial_name","total_count","processed_video","processed","progress_status","uploading","selected_chunk_sub","revisionData","revisionsTableLoading","revertChunkSelected","remove","handleChange","revertShowModal","openNotificationWithIcon","handleChangeStatus","meta","handleUpload","formData","put","fetchData","handleCancel","AudioOutlined","changeAudioShowModal","revisions","RollbackOutlined","sutitle","start_time","setTimeout","seconds","handleOk","apiLoop","setInterval","video_data","total_chunks","clearInterval","recordedBlob","qs","parse","location","ignoreQueryPrefix","LoadingOutlined","display","justifyContent","alignItems","percent","parseInt","toUpperCase","DownloadOutlined","download","textDecoration","color","height","url","Input","active","onOk","okButtonProps","marginTop","gutter","onProgress","textAlign","shape","PauseOutlined","CaretRightOutlined","initialFiles","canRemove","onChangeStatus","accept","multiple","autoUpload","maxFiles","styles","dropzoneActive","inputContent","onStop","onData","strokeColor","TextArea","autoSize","App","cookies","csrftoken","defaults","headers","common","exact","path","component","TutorialsListComponent","withCookies","Boolean","window","hostname","match","ReactDOM","CookiesProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2916d188.chunk.js","sourcesContent":["import React from \"react\";\nimport axios from 'axios'\nimport {Breadcrumb, Button, Col, Divider, Input, notification, Popconfirm, Row, Select, Table, Typography} from 'antd';\nimport {EditOutlined, EyeOutlined, HomeOutlined, SearchOutlined, VideoCameraOutlined} from '@ant-design/icons'\nimport {withRouter} from \"react-router-dom\";\n\nconst {Option} = Select;\nconst {Text} = Typography\n\nconst columns = [\n    {\n        title: 'FOSS',\n        dataIndex: 'foss',\n        key: 'foss',\n        sorter: (a, b) => a.foss.localeCompare(b.foss),\n        sortDirections: ['descend', 'ascend']\n    },\n    {\n        title: 'Tutorial Name',\n        dataIndex: 'tutorial',\n        key: 'tutorial',\n        sorter: (a, b) => a.tutorial.localeCompare(b.tutorial),\n        sortDirections: ['descend', 'ascend']\n    },\n    {\n        title: 'Language',\n        dataIndex: 'language',\n        key: 'language',\n        sorter: (a, b) => a.language.localeCompare(b.language),\n        sortDirections: ['descend', 'ascend']\n    }, {\n        title: 'Edit Video',\n        dataIndex: 'button',\n        key: 'button',\n    },\n];\n\nclass TutorialsListPage extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            tutorials: [],\n            filteredTutorials: [],\n            tutorialsInTable: [],\n            searchFilteredTable: [],\n            isLoading: true,\n            isTutDisabled: true,\n            fossDropdownOption: 'All',\n            tutorialDropdownOption: 'All',\n            searchBox: ''\n        }\n        this.filterFosses = this.filterFosses.bind(this)\n        this.filterTutorials = this.filterTutorials.bind(this)\n        this.renderOptions = this.renderOptions.bind(this);\n        this.searchTable = this.searchTable.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleSubmit(tut_id, lang_id) {\n        console.log(tut_id, lang_id)\n        const data = new FormData();\n        data.append('tutorial_detail', tut_id);\n        data.append('language', lang_id);\n        axios.post(`${process.env.REACT_APP_API_URL}/process_tutorials`, data)\n            .then((res) => {\n                console.log(res.data)\n                this.props.history.push({pathname: '/dashboard', search: `id=${res.data.id}`});\n            })\n            .catch((error) => {\n                notification.error({\n                    message: 'Error Occurred',\n                    description: error.response ? `Status: ${error.response.status} \\n ${error.response.statusText}` : 'Some Error Occurred',\n                    onClick: () => {\n                        console.log('Notification Clicked!');\n                    },\n                });\n            })\n    }\n\n\n    async filterFosses(value, option) {\n        console.log(value)\n        if (value === 'All') {\n            let all = this.state.tutorials\n            console.log(all)\n\n            this.setState({\n                fossDropdownOption: 'All',\n                filteredTutorials: all,\n                isTutDisabled: true,\n                tutorialsInTable: all,\n                tutorialDropdownOption: 'All'\n            })\n        } else {\n            let tuts = this.state.tutorials\n            tuts = await tuts.filter((item) => {\n                return item.foss === value\n            })\n            console.log(tuts)\n            this.setState({\n                fossDropdownOption: value,\n                filteredTutorials: tuts,\n                isTutDisabled: false,\n                tutorialsInTable: tuts\n            })\n        }\n    }\n\n    async filterTutorials(value, option) {\n        if (value === 'All') {\n            let tuts = this.state.filteredTutorials\n            tuts = await tuts.filter((item) => {\n                return item.foss === this.state.fossDropdownOption\n            })\n            this.setState({tutorialsInTable: tuts, tutorialDropdownOption: value})\n\n        } else {\n            let tuts = this.state.filteredTutorials\n            tuts = await tuts.filter((item) => {\n                return item.tutorial === value\n            })\n            console.log(tuts)\n            this.setState({tutorialsInTable: tuts, tutorialDropdownOption: value})\n        }\n    }\n\n\n    renderOptions(type) {\n        let options = new Set()\n        let optionRender = []\n        if (type === 'foss') {\n            this.state.tutorials.map((item) => {\n                options.add(item.foss)\n            })\n        } else {\n            this.state.filteredTutorials.map((item) => {\n                options.add(item.tutorial)\n            })\n        }\n\n        options = Array.from(options)\n        options.map((item, index) => {\n            optionRender.push(<Option key={index} value={item}>{item}</Option>)\n        })\n\n        return optionRender\n\n    }\n\n    async searchTable(e) {\n        let value = e.target.value\n        let filteredList = this.state.tutorialsInTable\n        filteredList = await filteredList.filter(item => {\n            let booltut = item.tutorial.toLowerCase().includes(value.toLowerCase())\n            let boolfoss = item.foss.toLowerCase().includes(value.toLowerCase())\n            let boollang = item.language.toLowerCase().includes(value.toLowerCase())\n            return booltut || boollang || boolfoss\n        })\n        this.setState({searchFilteredTable: filteredList, searchBox: value})\n\n    }\n\n    componentDidMount() {\n        let filtered_tuts = []\n        let fosses = new Set()\n        let tutorials = new Set()\n        let langs = new Set()\n        axios.get(`${process.env.REACT_APP_API_URL}/tutorials`)\n            .then(res => {\n                let data = res.data\n                data.map((tutorial) => {\n                    let tut_obj = {};\n                    tut_obj.key = tutorial.tutorial_detail.id\n                    tut_obj.foss = tutorial.foss_category.name\n                    tut_obj.tutorial = tutorial.tutorial_detail.tutorial\n                    tut_obj.language = tutorial.language.name\n                    tut_obj.isEdited = false\n                    tut_obj.tutorial_id = tutorial.tutorial_detail.id\n                    tut_obj.language_id = tutorial.language.id\n                    tut_obj.button = <Popconfirm onConfirm={\n                        () => this.handleSubmit(\n                            tutorial.tutorial_detail.id,\n                            tutorial.language.id)\n                    } title=\"Are you sure?\" okText=\"Yes\" cancelText=\"No\">\n                        <Button size={'large'} icon={<EditOutlined/>}\n                        >Edit\n                            Video</Button></Popconfirm>\n                    filtered_tuts.push(tut_obj)\n                    fosses.add(tut_obj.foss)\n                    tutorials.add(tut_obj.tutorial)\n                    langs.add(tut_obj.language)\n                    return filtered_tuts\n                    // this.setState({tutorials: existing_tut})\n                })\n            }).then(() => {\n            axios.get(`${process.env.REACT_APP_API_URL}/process_tutorials`)\n                .then(res => {\n                    let data = res.data\n                    data.map((tut) => {\n                        console.log(tut)\n                        for (let i = 0; i < filtered_tuts.length; i++) {\n                            if (filtered_tuts[i].tutorial_id === tut.tutorial_detail && filtered_tuts[i].language_id === tut.language) {\n                                filtered_tuts[i].isEdited = true\n                                filtered_tuts[i].button =\n                                    <Button size={'large'} icon={<EyeOutlined/>} href={`#/dashboard?id=${tut.id}`}>Edit\n                                        Video</Button>\n                            }\n                        }\n                    })\n\n                })\n                .then(() => {\n                    this.setState({\n                        tutorials: filtered_tuts,\n                        isLoading: false,\n                        filteredTutorials: filtered_tuts,\n                        tutorialsInTable: filtered_tuts\n                    })\n\n\n                })\n        })\n    }\n\n    render() {\n        console.log(this.props.fosses)\n        return (\n            <div>\n                <Breadcrumb>\n                    <Breadcrumb.Item href=\"/\">\n                        <HomeOutlined/>\n                    </Breadcrumb.Item>\n                    <Breadcrumb.Item>\n                        <VideoCameraOutlined/>\n                        <span>Video Processing</span>\n                    </Breadcrumb.Item>\n                </Breadcrumb>\n                <Divider/>\n                <Row xs={2} sm={4} md={6} lg={10} xl={10}>\n                    <Col span={6} offset={1}>\n                        <Text level={4}>\n                            FOSS &nbsp; &nbsp; &nbsp;\n                        </Text>\n                        <Select\n                            value={this.state.fossDropdownOption}\n                            size='large'\n                            onChange={this.filterFosses}\n                            defaultValue=\"All\"\n                            style={{width: 120}}>\n                            <Option value='All'>All</Option>\n                            {\n                                this.renderOptions('foss')\n                            }\n                        </Select>\n                    </Col>\n                    <Col span={6}>\n                        <Text level={3}>\n                            Tutorial  &nbsp; &nbsp; &nbsp;\n                        </Text>\n                        <Select value={this.state.tutorialDropdownOption}\n                                size='large'\n                                disabled={this.state.isTutDisabled}\n                                style={{width: 120}}\n                                onChange={this.filterTutorials}>\n                            <Option value='All'>All</Option>\n                            {\n                                this.renderOptions('tutorials')\n\n                            }\n                        </Select>\n                    </Col>\n                    <Col span={10}>\n                        <Input allowClear size=\"large\" placeholder=\"Search\" prefix={<SearchOutlined/>}\n                               onChange={this.searchTable}/>\n\n                    </Col>\n                    <Col span={1}/>\n                </Row>\n                <Divider style={{backgroundColor: 'white'}}/>\n                <Table\n                    loading={this.state.isLoading}\n                    dataSource={this.state.searchBox !== '' ? this.state.searchFilteredTable : this.state.tutorialsInTable}\n                    columns={columns}/>\n            </div>\n\n\n        );\n    }\n}\n\n\nexport default withRouter(TutorialsListPage)\n","import React from 'react'\nimport {Button, Result} from \"antd\";\n\nclass MediaNotFound extends React.Component{\n    render() {\n        return(  <Result\n            status=\"warning\"\n            title=\"Media Not Found\"\n            extra={<Button type=\"primary\" href={'#'}>Back Home</Button>}\n        />)\n\n    }\n\n}\n\nexport default MediaNotFound\n","import React from 'react'\nimport {Button, Result} from \"antd\";\n\nclass Error403Component extends React.Component{\n    render() {\n        return(  <Result\n            status=\"404\"\n            title=\"404\"\n            subTitle=\"Sorry, the page you visited does not exist.\"\n            extra={<Button type=\"primary\" href={'#'}>Back Home</Button>}\n        />)\n\n    }\n\n}\n\nexport default Error403Component\n","import React from \"react\";\nimport {Button, Divider, Modal, Popconfirm, Select, Space, Switch, Table, Tabs} from \"antd\";\nimport ReactAudioPlayer from 'react-audio-player';\nimport ReactDiffViewer from 'react-diff-viewer';\nimport './revertModal.styles.css'\n\nconst {TabPane} = Tabs\nconst {Option} = Select\n\n\nclass RevertModal extends React.Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            splitView: true,\n            oldValue: '',\n            newValue: '',\n            oldDropDownValue: 'Select a version',\n            newDropDownValue: 'Select a version',\n        }\n    }\n\n    toggleSplitView = () => {\n        this.setState({splitView: !this.state.splitView})\n    }\n\n    handleChangeCompare = (value, type) => {\n\n        console.log(value, type)\n        const subtitle = this.props.dataSource[value].subtitle\n        const d = new Date(this.props.dataSource[value].history_date)\n\n        if (type === 'old') {\n            this.setState({\n                oldValue: subtitle,\n                oldDropDownValue: `Version ${this.props.dataSource.length - value}`\n            })\n\n        } else {\n            this.setState({\n                newValue: subtitle,\n                newDropDownValue: `Version ${this.props.dataSource.length - value}`\n            })\n        }\n\n    }\n    resetDropdown = () => {\n        this.setState({\n            oldValue: '',\n            newValue: '',\n            oldDropDownValue: 'Select a date',\n            newDropDownValue: 'Select a date'\n        })\n    }\n\n\n    componentDidMount() {\n        const history = this.props.dataSource;\n\n\n    }\n\n    render() {\n\n        const {revertModalVisible, revertHandleCancel, isLoading, dataSource, revertChunk, chunk_no} = this.props\n\n        const columns = [\n            {\n                title: 'Version',\n                key: 'index',\n                render: (text, record, index) => this.props.dataSource.length - index,\n                sortDirections: ['descend', 'ascend']\n            },\n            {\n                title: 'Date',\n                dataIndex: 'history_date',\n                key: 'history_date',\n                render: (date) => {\n                    const d = new Date(date)\n                    const date_time = `${d.toDateString()} ${d.toTimeString().split(' ')[0]}`\n                    return date_time\n                }\n            },\n            {\n                title: 'Subtitle',\n                dataIndex: 'subtitle',\n                key: 'subtitle',\n            },\n            {\n                title: 'Audio',\n                dataIndex: 'audio_chunk',\n                key: 'audio_chunk',\n                render: (audio_chunk) => {\n                    return (<ReactAudioPlayer\n                        src={`${process.env.REACT_APP_MEDIA_URL}/${audio_chunk}`}\n                        controls\n                        controlsList=\"nodownload\"\n                    />)\n                }\n            },\n\n            {\n                title: 'Revert',\n                render: (value, record, index) => (\n                    <Popconfirm\n                        onConfirm={() => revertChunk(value.history_id, chunk_no)} title=\"Are you sure?\"\n                        okText=\"Yes\"\n                        cancelText=\"No\"\n                        disabled={index == 0}\n                    >\n                        <Button size='middle' type=\"primary\"\n                                disabled={index === 0}>Revert</Button>\n                    </Popconfirm>\n                )\n            },\n        ];\n\n        return (\n            <Modal className='revertModal' footer={null}\n                   title=\"Revisions\"\n                   visible={revertModalVisible}\n                   onCancel={() => {\n                       revertHandleCancel()\n                       this.resetDropdown()\n                   }}\n                   width='60%'\n\n            >\n                <Tabs size='large' type=\"card\">\n                    <TabPane tab=\"Revert\" key=\"1\">\n                        <Table loading={isLoading} columns={columns} dataSource={dataSource}/>\n\n                    </TabPane>\n                    <TabPane tab=\"Compare\" key=\"2\">\n                        <Space style={{width: '88%'}} size='large' align='baseline'>\n                            <Select\n                                value={this.state.oldDropDownValue}\n                                onChange={(e) => this.handleChangeCompare(e, 'old')} style={{width: 240}}>\n                                {\n                                    dataSource.map((item, idx) => {\n                                        console.log(item)\n                                        const d = new Date(item.history_date)\n                                        return (<Option\n\n                                            key={item.history_id}\n                                            value={idx}>\n                                            {`Version ${this.props.dataSource.length - idx}`}\n                                        </Option>)\n                                    })\n                                }\n                            </Select>\n                            With\n                            <Select\n                                value={this.state.newDropDownValue}\n                                onChange={(e) => this.handleChangeCompare(e, 'new')}\n                                style={{width: 240}}>\n                                {\n                                    dataSource.map((item, idx) => {\n                                        console.log(item)\n                                        const d = new Date(item.history_date)\n                                        return (<Option\n                                            key={item.history_id}\n                                            value={idx}>\n                                            {`Version ${this.props.dataSource.length - idx}`}\n                                        </Option>)\n                                    })\n                                }\n                            </Select>\n\n                        </Space>\n                        <Space style={{width: '12%'}} align='end'>\n                            Split View\n                            <Switch onChange={this.toggleSplitView} defaultChecked/> </Space>\n                        <Divider/>\n\n                        <ReactDiffViewer oldValue={this.state.oldValue} newValue={this.state.newValue}\n                                         splitView={this.state.splitView}/>\n                    </TabPane>\n                </Tabs>\n\n            </Modal>\n        )\n    }\n\n}\n\n\nexport default RevertModal\n","import React from \"react\";\nimport {withRouter} from \"react-router-dom\";\nimport qs from 'qs'\nimport {ReactMic} from 'react-mic';\n\nimport axios from 'axios'\nimport {\n    Breadcrumb,\n    Button,\n    Col,\n    Divider,\n    Input,\n    Modal,\n    notification,\n    Progress,\n    Result,\n    Row,\n    Skeleton, Space,\n    Table,\n    Tabs,\n    Typography,\n} from 'antd';\nimport ReactAudioPlayer from 'react-audio-player';\nimport ReactPlayer from \"react-player\";\nimport {\n    AudioOutlined,\n    CaretRightOutlined,\n    DownloadOutlined,\n    HomeOutlined,\n    LoadingOutlined,\n    PauseOutlined,\n    RollbackOutlined,\n    VideoCameraOutlined\n} from '@ant-design/icons'\nimport MediaNotFound from \"../../components/errors/mediaNotFound\";\nimport Error403Component from \"../../components/errors/error403.component\";\nimport './dashboard.page.css'\nimport RevertModal from \"../../components/revertModal/revertModal.component\";\nimport 'react-dropzone-uploader/dist/styles.css'\nimport Dropzone from 'react-dropzone-uploader'\n\nconst {Title, Text} = Typography;\nconst {TabPane} = Tabs\n\n\nclass Dashboard extends React.Component {\n    warning\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: '',\n            current_count: '',\n            chunks: [],\n            status: 'loading',\n            checksum: '',\n            foss: '',\n            tutorial_name: '',\n            language: '',\n            total_count: '',\n            processed_video: '',\n            processed: false,\n            progress_status: '',\n            visible: false,\n            audio_file: '',\n            uploading: false,\n            selected_chunk: 0,\n            selected_chunk_sub: '',\n            playing: false,\n            revertModalVisible: false,\n            revisionData: [],\n            revisionsTableLoading: true,\n            revertChunkSelected: '',\n            subtitle: '',\n            downloadURL: '',\n            remove: () => {\n                console.log('nothing to remove')\n            },\n            record: false\n        }\n        this.handleChange = (e) => {\n            let value = e.target.value\n            this.setState({selected_chunk_sub: value});\n\n        }\n        this.revertShowModal = (chunk_no) => {\n            this.setState({revertModalVisible: true, revisionData: [], revertChunkSelected: chunk_no})\n            axios.get(`${process.env.REACT_APP_API_URL}/process_tutorials/${this.state.id}/${chunk_no}`)\n                .then((res) => {\n                    console.log(res.data.history)\n                    this.setState({revisionData: res.data.history})\n\n                })\n                .then(() => {\n                    this.setState({revisionsTableLoading: false})\n                })\n        }\n        this.openNotificationWithIcon = (title, message, type) => {\n            notification[type]({\n                message: title,\n                description: message\n            });\n        };\n\n        this.handleChangeStatus = ({meta, file, remove}, status) => {\n            if (status !== 'rejected_file_type') {\n                this.setState({audio_file: file, remove: remove})\n            } else {\n                this.openNotificationWithIcon('Unsupported File', 'You can only upload .mp3 files', 'warning')\n            }\n        };\n        this.handleUpload = () => {\n            this.setState({\n                uploading: true,\n                progress_status: 'normal',\n                status: 'Uploading'\n            });\n            const {audio_file, selected_chunk, selected_chunk_sub} = this.state;\n            console.log(audio_file)\n            const formData = new FormData();\n            formData.append('audio_chunk', audio_file);\n            formData.append('subtitle', selected_chunk_sub)\n            axios.put(`${process.env.REACT_APP_API_URL}/process_tutorials/${this.state.id}/${selected_chunk}`, formData)\n                .then(() => {\n                    this.fetchData();\n                    this.setState({uploading: false});\n                })\n                .then(() => this.handleCancel())\n                .catch((error) => {\n                    console.log(error.response)\n                    this.setState({uploading: false, status:'done'});\n                    this.handleCancel()\n                    this.openNotificationWithIcon('Duplicate File', 'You have already uploaded this audio, Simply revert back', 'warning')\n\n                })\n        };\n\n        this.columns = [\n            {\n                title: 'Chunk No.',\n                dataIndex: 'chunk_no',\n                key: 'chunk_no',\n                width: '5%'\n\n            },\n            {\n                title: 'Audio',\n                dataIndex: 'audio_chunk',\n                key: 'audio_chunk',\n                width: '10%',\n                render: (audio_chunk) => {\n                    return (<ReactAudioPlayer\n                        src={audio_chunk}\n                        controls\n                    />)\n                },\n            },\n            {\n                title: 'Start Time',\n                dataIndex: 'start_time',\n                key: 'start_time',\n                width: '10%',\n\n\n            },\n            {\n                title: 'End Time',\n                dataIndex: 'end_time',\n                key: 'end_time',\n                width: '10%',\n\n            },\n            {\n                title: 'Subtitle',\n                dataIndex: 'subtitle',\n                key: 'subtitle',\n                width: '55%',\n                // render: (value) => {\n                //     return (ReactHtmlParser(value))\n                // },\n                sorter: (a, b) => a.subtitle.localeCompare(b.subtitle),\n                sortDirections: ['descend', 'ascend']\n            },\n            {\n                title: 'Change Audio/Subtitle',\n                width: '10%',\n                render: (value) => {\n                    return (<Button icon={<AudioOutlined/>} onClick={() => this.changeAudioShowModal(value.chunk_no)} disabled={this.state.status!=='done'}>Change\n                            Audio / Subtitle</Button>\n                    )\n                }\n            },\n            {\n                title: 'Revert',\n                width: '10%',\n                render: (value) => {\n                    console.log(value.revisions)\n                    return (<Button icon={<RollbackOutlined/>}\n                                    onClick={() => this.revertShowModal(value.chunk_no)}\n                                    disabled={value.revisions <= 1 || this.state.status!=='done'}>Revert </Button>\n                    )\n                }\n            },\n        ];\n        this.changeAudioShowModal = (chunk) => {\n            this.state.remove()\n            let sutitle = this.state.chunks[chunk]['subtitle']\n            let start_time = this.state.chunks[chunk]['start_time']\n            setTimeout((chunk) => {\n                let a = start_time.split(':');\n                let seconds = (+a[0]) * 60 * 60 + (+a[1]) * 60 + (+a[2]);\n                console.log(seconds)\n                this.player.seekTo(seconds, 'seconds')\n                // this.player.showPreview()\n\n            }, 1000)\n            this.setState({\n                visible: true,\n                selected_chunk: chunk,\n                selected_chunk_sub: sutitle\n            });\n        };\n\n        this.handleOk = e => {\n            console.log(e);\n            this.setState({\n                visible: false,\n            });\n        };\n\n        this.revertHandleCancel = () => {\n            this.setState({revertModalVisible: false})\n        }\n\n        this.revertChunk = (history_id, chunk_no) => {\n            this.setState({\n                uploading: true,\n                progress_status: 'normal',\n                status: 'Reverting',\n            });\n            axios.put(`${process.env.REACT_APP_API_URL}/process_tutorials/${this.state.id}/${chunk_no}/revert/${history_id}`)\n                .then(() => {\n                    this.fetchData();\n                    this.setState({uploading: false});\n                })\n                .then(() => this.revertHandleCancel())\n        }\n\n        this.handleCancel = e => {\n\n            console.log(e);\n            this.setState({playing: false})\n            this.setState({\n                audio_file: '',\n                visible: false,\n            });\n        };\n\n        this.fetchData = () => {\n            this.setState({processed: false})\n            this.apiLoop = setInterval(() => {\n                axios.get(`${process.env.REACT_APP_API_URL}/process_tutorials/${this.state.id}`)\n                    .then((res) => {\n                        console.log(res.data)\n                        this.setState({\n                            current_count: res.data.chunks.length,\n                            chunks: res.data.chunks,\n                            total_count: res.data.video_data.total_chunks,\n                            tutorial_name: res.data.video_data.tutorial_name,\n                            language: res.data.video_data.language,\n                            foss: res.data.video_data.foss,\n                            status: res.data.video_data.status,\n                            checksum: res.data.video_data.checksum,\n                        });\n                        if (res.data.video_data.processed_video === null) {\n                            this.setState(\n                                {\n                                    'processed_video': res.data.video_data.video\n                                }\n                            )\n                        } else {\n                            this.setState({\n                                'processed_video': res.data.video_data.processed_video,\n                                'subtitle': res.data.video_data.subtitle\n                            })\n                        }\n                        if (res.data.video_data.status === 'done' || res.data.video_data.status === 'error' || res.data.video_data.status === 'media_not_found') {\n                            clearInterval(this.apiLoop);\n                            this.setState({processed: true})\n                        }\n                    })\n                    .catch((error) => {\n                        notification.error({\n                            message: 'Error Occurred',\n                            description: error.response ? `Status: ${error.response.status} \\n ${error.response.statusText}` : 'Some Error Occurred',\n                            onClick: () => {\n                                console.log('Notification Clicked!');\n                            },\n                        });\n                        this.setState({status: 'not found', progress_status: 'exception'})\n\n                        clearInterval(this.apiLoop)\n                    })\n            }, 2000)\n\n        }\n\n\n    }\n\n    ref = player => {\n        this.player = player\n    }\n\n    togglePlayButton = () => {\n        let status = this.state.playing\n        status ? this.setState({playing: false}) : this.setState({playing: true})\n    }\n\n    pauseVideo = video => {\n        let chunk = this.state.selected_chunk\n\n        let start_time = this.state.chunks[chunk]['start_time']\n        let a = start_time.split(':');\n        let start_seconds = (+a[0]) * 60 * 60 + (+a[1]) * 60 + (+a[2]);\n\n        let end_time = this.state.chunks[chunk]['end_time']\n        a = end_time.split(':');\n        let end_seconds = (+a[0]) * 60 * 60 + (+a[1]) * 60 + (+a[2]);\n        // this.player.showPreview()\n\n\n        if (Math.floor(video.playedSeconds) === end_seconds) {\n            this.setState({playing: false})\n            this.player.seekTo(start_seconds, 'seconds')\n        }\n    }\n\n    startRecording = () => {\n        this.setState({record: true});\n    }\n\n    stopRecording = () => {\n        this.setState({record: false});\n    }\n\n    onData(recordedBlob) {\n        console.log('chunk of real-time data is: ', recordedBlob);\n    }\n\n    onSave = async (blobObject) => {\n        let file = await new File([blobObject.blob], \"record.webm\");\n        this.setState({downloadURL: blobObject.blobURL})\n        this.setState({audio_file: file})\n    }\n\n\n    onStop(recordedBlob) {\n        console.log('recordedBlob is: ', recordedBlob);\n    }\n\n\n    componentWillMount() {\n        let id = qs.parse(this.props.location.search, {ignoreQueryPrefix: true}).id\n        this.setState({id: id})\n\n    }\n\n    componentDidMount() {\n        this.fetchData()\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.apiLoop)\n    }\n\n\n    render() {\n        const {uploading, audio_file} = this.state;\n\n        let status = this.state.status\n        if (status === 'loading') {\n            return (\n                <Result\n                    icon={<LoadingOutlined/>}\n                    title=\"Fetching Files\"\n                />\n\n            )\n        } else if (status === 'not found') {\n            return (<Error403Component/>)\n        } else if (status === 'media_not_found') {\n            return (<MediaNotFound/>)\n        } else {\n            return (\n                <div>\n                    <Breadcrumb>\n                        <Breadcrumb.Item href=\"/\">\n                            <HomeOutlined/>\n                        </Breadcrumb.Item>\n                        <Breadcrumb.Item href=\"/videoprocessing\">\n                            <VideoCameraOutlined/>\n                            <span>Video Processing</span>\n                        </Breadcrumb.Item>\n                        <Breadcrumb.Item>\n                            <span>Dashboard</span>\n                        </Breadcrumb.Item>\n                    </Breadcrumb>\n                    <Row align=\"middle\">\n                        <Col span={4}\n                             style={{display: 'inline-flex', justifyContent: 'center', alignItems: 'center'}}>\n                            <Progress type=\"circle\"\n                                      percent={parseInt((this.state.current_count / this.state.total_count) * 100)}\n                                      status={this.state.progress_status}/>\n                        </Col>\n                        <Col style={{display: 'inline-flex', justifyContent: 'center', alignItems: 'center'}}\n                             span={4}>\n                            <Typography>\n                                <Title level={4}>Status: {this.state.status.toUpperCase()}</Title>\n                                <Title>\n                                    <Button\n                                        type=\"primary\" icon={<DownloadOutlined/>}\n                                        download='video'\n                                        href={this.state.processed_video}\n                                        style={{textDecoration: 'none', color: 'white'}}>Download\n                                        Tutorial</Button>\n\n                                    <Button\n                                        type=\"primary\" icon={<DownloadOutlined/>}\n                                        download='subtitle.srt'\n                                        href={this.state.subtitle}\n                                        style={{textDecoration: 'none', color: 'white'}}>Download\n                                        Subtitle</Button>\n\n                                </Title>\n                            </Typography>\n                        </Col>\n\n                        <Col style={{display: 'inline-flex', justifyContent: 'center', alignItems: 'center'}}\n                             span={8}>\n                            <Typography>\n                                <Title level={3}>{this.state.tutorial_name}</Title>\n                                <Title level={4}>{this.state.foss}</Title>\n                            </Typography>\n                        </Col>\n\n                        <Col style={{display: 'inline-flex', justifyContent: 'center', alignItems: 'center'}}\n                             span={8}>\n\n                            {\n                                this.state.status === 'done' ? <ReactPlayer\n\n\n                                        height={200}\n                                        url={this.state.processed_video} controls/> :\n                                    <Skeleton.Input style={{height: '200px'}} active/>\n                            }\n\n\n                        </Col>\n\n                    </Row>\n                    <Row>\n                        <Table\n                            className='data-table'\n                            dataSource={this.state.chunks}\n                            columns={this.columns}/>\n                    </Row>\n\n                    <Modal\n                        title=\"Change Audio\"\n                        visible={this.state.visible}\n                        onOk={this.handleOk}\n                        okButtonProps={{\n\n\n                            type: \"primary\",\n                            onClick: this.handleUpload,\n                            disabled: audio_file.length === 0,\n                            loading: uploading,\n                            style: {marginTop: 16}\n                        }\n                        }\n                        okText={uploading ? 'Uploading' : 'Start Upload'}\n                        onCancel={this.handleCancel}\n                        width={'60%'}\n                    >\n                        <Row gutter={16}>\n                            <Col span={12}>\n\n                                <ReactPlayer\n                                    controls={false}\n                                    playing={this.state.playing}\n                                    onProgress={this.pauseVideo}\n                                    ref={this.ref}\n                                    width='100%'\n                                    url={this.state.processed_video}/>\n                                <br/>\n                                <div style={{textAlign: 'center'}}>\n\n                                    <Button\n                                        size='large'\n                                        type=\"primary\"\n                                        shape=\"round\"\n                                        icon={this.state.playing ? <PauseOutlined/> : <CaretRightOutlined/>}\n                                        onClick={this.togglePlayButton}\n                                    />\n                                </div>\n                            </Col>\n                            <Col span={12}>\n                                <Tabs size='large' type=\"card\">\n                                    <TabPane tab=\"Upload\" key=\"1\">\n                                        <Dropzone\n                                            initialFiles={[]}\n                                            canRemove={false}\n                                            className=\"fileUploader\"\n                                            onChangeStatus={this.handleChangeStatus}\n                                            accept=\".mp3\"\n                                            multiple={false}\n                                            autoUpload={false}\n                                            maxFiles={1}\n                                            styles={{\n                                                dropzoneActive: {\n                                                    'height': '60%'\n                                                }\n                                            }}\n                                            inputContent=\"Drag Audio or Click to Browse\"\n                                        />\n                                    </TabPane>\n                                    <TabPane tab=\"Record\" key=\"2\">\n                                        <div>\n                                            <ReactMic\n                                                record={this.state.record}\n                                                className=\"sound-wave\"\n                                                onStop={this.onStop}\n                                                onData={this.onData}\n                                                onSave={this.onSave}\n                                                strokeColor=\"#000000\"\n                                                backgroundColor=\"white\"\n\n\n                                            />\n                                            <Space>\n                                                <Button type=\"primary\" shape=\"round\"\n                                                        onClick={this.startRecording}\n                                                        disabled={this.state.record===true}\n                                                > Start </Button>\n                                                <Button type=\"primary\" shape=\"round\"\n                                                        onClick={this.stopRecording}\n                                                        disabled={this.state.record===false}\n\n                                                > Stop </Button>\n                                                <Button type=\"primary\" shape=\"round\" disabled={this.state.downloadURL===''} href={this.state.downloadURL}\n                                                        download=\"recording.webm\">Download</Button>\n                                            </Space>\n                                            {this.state.downloadURL?\n                                                <div>\n                                                    <Divider/>\n\n                                                    <ReactAudioPlayer\n                                                        src={this.state.downloadURL}\n                                                        controls\n                                                    />\n                                                </div>\n                                           :null}\n\n                                        </div>\n                                    </TabPane>\n                                </Tabs>\n\n                                <Divider/>\n                                <Text>Subititle</Text>\n                                {\n                                    status === 'done' ?\n                                        <Input.TextArea allowClear\n                                                        autoSize\n                                                        value={this.state.selected_chunk_sub}\n                                                        onChange={this.handleChange}\n                                        />\n                                        :\n                                        null\n\n\n                                }</Col>\n                        </Row>\n\n\n                    </Modal>\n\n                    <RevertModal\n                        revertModalVisible={this.state.revertModalVisible}\n                        revertHandleCancel={this.revertHandleCancel}\n                        dataSource={this.state.revisionData}\n                        isLoading={this.state.revisionsTableLoading}\n                        chunk_no={this.state.revertChunkSelected}\n                        revertChunk={this.revertChunk}\n                    />\n\n                </div>\n\n            )\n        }\n    }\n\n\n}\n\nexport default withRouter(Dashboard)\n","import React from 'react';\nimport './App.css';\nimport TutorialsListComponent from \"./pages/tutorialsList/tutorialsList.page\";\nimport {Route, Switch} from 'react-router-dom';\nimport Dashboard from \"./pages/dashboard/dashboard.page\";\nimport {instanceOf} from 'prop-types';\nimport {Cookies, withCookies} from 'react-cookie';\nimport axios from \"axios\";\n\nclass App extends React.Component {\n    static propTypes = {\n        cookies: instanceOf(Cookies).isRequired\n    };\n\n\n    constructor(props) {\n        super(props);\n\n        const {cookies} = props;\n        this.state = {\n            csrftoken: cookies.get('csrftoken')\n        };\n        axios.defaults.headers.common['X-CSRFToken'] = this.state.csrftoken // for all requests\n\n    }\n\n\n\n\n    render() {\n        return (\n            <div className='App'>\n                <Switch>\n                    <Route exact path='/' component={TutorialsListComponent}/>\n                    <Route path='/dashboard' component={Dashboard}/>\n                </Switch>\n            </div>\n\n        )\n    };\n}\n\n\nexport default withCookies(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from \"react-router-dom\";\nimport {CookiesProvider} from 'react-cookie';\n\nReactDOM.render(\n    <HashRouter>\n        <CookiesProvider>\n            <App/>\n        </CookiesProvider>\n    </HashRouter>\n    ,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}