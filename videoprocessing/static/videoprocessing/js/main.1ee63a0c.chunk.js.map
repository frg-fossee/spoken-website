{"version":3,"sources":["components/tutorialsList/tutorialsList.component.jsx","pages/Dashboard/dashboard.page.jsx","App.js","serviceWorker.js","index.js"],"names":["Option","Text","columns","title","dataIndex","key","sorter","a","b","foss","localeCompare","sortDirections","tutorial","language","TutorialsListComponent","props","state","tutorials","filteredTutorials","tutorialsInTable","searchFilteredTable","isLoading","isTutDisabled","fossDropdownOption","tutorialDropdownOption","searchBox","filterFosses","bind","filterTutorials","renderOptions","searchTable","handleSubmit","tut_id","lang_id","console","log","data","FormData","append","axios","post","process","then","res","history","push","pathname","search","id","catch","error","notification","message","description","response","status","statusText","onClick","value","option","all","this","setState","tuts","filter","item","type","options","Set","optionRender","map","add","Array","from","index","e","target","filteredList","booltut","toLowerCase","includes","boolfoss","boollang","filtered_tuts","fosses","langs","get","tut_obj","tutorial_detail","foss_category","name","isEdited","tutorial_id","language_id","button","onConfirm","okText","cancelText","size","icon","EditOutlined","tut","i","length","EyeOutlined","xs","sm","md","lg","xl","span","offset","level","onChange","defaultValue","style","width","disabled","allowClear","placeholder","prefix","SearchOutlined","scroll","y","loading","dataSource","React","Component","withRouter","Dragger","Title","Dashboard","current_count","chunks","checksum","tutorial_name","total_count","processed_video","processed","progress_status","visible","config","multiple","action","info","file","fileList","success","render","audio_chunk","src","controls","controlsList","subtitle","AudioOutlined","showModal","handleOk","handleCancel","fetchData","apiLoop","setInterval","video_data","total_chunks","video","clearInterval","qs","parse","location","ignoreQueryPrefix","align","display","justifyContent","alignItems","percent","parseInt","toUpperCase","DownloadOutlined","height","url","onOk","onCancel","className","InboxOutlined","App","cookies","csrftoken","defaults","headers","common","exact","path","component","withCookies","Boolean","window","hostname","match","ReactDOM","CookiesProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qgBAMOA,E,IAAAA,OACAC,E,IAAAA,KAEDC,EAAU,CACZ,CACIC,MAAO,OACPC,UAAW,OACXC,IAAK,OACLC,OAAQ,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,KAAKC,cAAcF,EAAEC,OACzCE,eAAgB,CAAC,UAAW,WAEhC,CACIR,MAAO,gBACPC,UAAW,WACXC,IAAK,WACLC,OAAQ,SAACC,EAAGC,GAAJ,OAAUD,EAAEK,SAASF,cAAcF,EAAEI,WAC7CD,eAAgB,CAAC,UAAW,WAEhC,CACIR,MAAO,WACPC,UAAW,WACXC,IAAK,WACLC,OAAQ,SAACC,EAAGC,GAAJ,OAAUD,EAAEM,SAASH,cAAcF,EAAEK,WAC7CF,eAAgB,CAAC,UAAW,WAC7B,CACCR,MAAO,aACPC,UAAW,SACXC,IAAK,WAIPS,E,kDAEF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,UAAW,GACXC,kBAAmB,GACnBC,iBAAkB,GAClBC,oBAAqB,GACrBC,WAAW,EACXC,eAAe,EACfC,mBAAoB,MACpBC,uBAAwB,MACxBC,UAAW,IAEf,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,gBAAkB,EAAKA,gBAAgBD,KAArB,gBACvB,EAAKE,cAAgB,EAAKA,cAAcF,KAAnB,gBACrB,EAAKG,YAAc,EAAKA,YAAYH,KAAjB,gBACnB,EAAKI,aAAe,EAAKA,aAAaJ,KAAlB,gBAjBL,E,yDAoBNK,EAAQC,GAAU,IAAD,OAC1BC,QAAQC,IAAIH,EAAQC,GACpB,IAAMG,EAAO,IAAIC,SACjBD,EAAKE,OAAO,kBAAmBN,GAC/BI,EAAKE,OAAO,WAAYL,GACxBM,IAAMC,KAAN,UAAcC,4CAAd,sBAAiEL,GAC5DM,MAAK,SAACC,GACHT,QAAQC,IAAIQ,EAAIP,MAChB,EAAKrB,MAAM6B,QAAQC,KAAK,CAACC,SAAU,aAAcC,OAAO,MAAD,OAAQJ,EAAIP,KAAKY,SAE3EC,OAAM,SAACC,GACJC,EAAA,EAAaD,MAAM,CACfE,QAAS,iBACTC,YAAaH,EAAMI,SAAN,kBAA4BJ,EAAMI,SAASC,OAA3C,eAAwDL,EAAMI,SAASE,YAAe,sBACnGC,QAAS,WACLvB,QAAQC,IAAI,iC,4EAObuB,EAAOC,G,4EACtBzB,QAAQC,IAAIuB,GACE,QAAVA,E,gBACIE,EAAMC,KAAK7C,MAAMC,UACrBiB,QAAQC,IAAIyB,GAEZC,KAAKC,SAAS,CACVvC,mBAAoB,MACpBL,kBAAmB0C,EACnBtC,eAAe,EACfH,iBAAkByC,EAClBpC,uBAAwB,Q,8BAGxBuC,EAAOF,KAAK7C,MAAMC,U,UACT8C,EAAKC,QAAO,SAACC,GACtB,OAAOA,EAAKxD,OAASiD,K,QADzBK,E,OAGA7B,QAAQC,IAAI4B,GACZF,KAAKC,SAAS,CACVvC,mBAAoBmC,EACpBxC,kBAAmB6C,EACnBzC,eAAe,EACfH,iBAAkB4C,I,yLAKRL,EAAOC,G,mFACX,QAAVD,E,uBACIK,EAAOF,KAAK7C,MAAME,kB,SACT6C,EAAKC,QAAO,SAACC,GACtB,OAAOA,EAAKxD,OAAS,EAAKO,MAAMO,sB,OADpCwC,E,OAGAF,KAAKC,SAAS,CAAC3C,iBAAkB4C,EAAMvC,uBAAwBkC,I,8BAG3DK,EAAOF,KAAK7C,MAAME,kB,UACT6C,EAAKC,QAAO,SAACC,GACtB,OAAOA,EAAKrD,WAAa8C,K,QAD7BK,E,OAGA7B,QAAQC,IAAI4B,GACZF,KAAKC,SAAS,CAAC3C,iBAAkB4C,EAAMvC,uBAAwBkC,I,8IAKzDQ,GACV,IAAIC,EAAU,IAAIC,IACdC,EAAe,GAgBnB,MAfU,SAAPH,EACCL,KAAK7C,MAAMC,UAAUqD,KAAI,SAACL,GACtBE,EAAQI,IAAIN,EAAKxD,SAGrBoD,KAAK7C,MAAME,kBAAkBoD,KAAI,SAACL,GAC9BE,EAAQI,IAAIN,EAAKrD,cAIzBuD,EAAUK,MAAMC,KAAKN,IACbG,KAAI,SAACL,EAAMS,GACfL,EAAaxB,KAAK,kBAAC7C,EAAD,CAAQK,IAAKqE,EAAOhB,MAAOO,GAAOA,OAGjDI,I,2EAIOM,G,gFACVjB,EAAQiB,EAAEC,OAAOlB,MACjBmB,EAAehB,KAAK7C,MAAMG,iB,SACT0D,EAAab,QAAO,SAAAC,GACrC,IAAIa,EAAUb,EAAKrD,SAASmE,cAAcC,SAAStB,EAAMqB,eACrDE,EAAWhB,EAAKxD,KAAKsE,cAAcC,SAAStB,EAAMqB,eAClDG,EAAWjB,EAAKpD,SAASkE,cAAcC,SAAStB,EAAMqB,eAC1D,OAAOD,GAAWI,GAAYD,K,OAJlCJ,E,OAMAhB,KAAKC,SAAS,CAAC1C,oBAAqByD,EAAcpD,UAAWiC,I,iJAI5C,IAAD,OACZyB,EAAgB,GAChBC,EAAS,IAAIhB,IACbnD,EAAY,IAAImD,IAChBiB,EAAQ,IAAIjB,IAChB7B,IAAM+C,IAAN,UAAa7C,4CAAb,eACKC,MAAK,SAAAC,GACSA,EAAIP,KACVkC,KAAI,SAAC1D,GACN,IAAI2E,EAAU,GAoBd,OAnBAA,EAAQlF,IAAMO,EAAS4E,gBAAgBxC,GACvCuC,EAAQ9E,KAAOG,EAAS6E,cAAcC,KACtCH,EAAQ3E,SAAWA,EAAS4E,gBAAgB5E,SAC5C2E,EAAQ1E,SAAWD,EAASC,SAAS6E,KACrCH,EAAQI,UAAW,EACnBJ,EAAQK,YAAchF,EAAS4E,gBAAgBxC,GAC/CuC,EAAQM,YAAcjF,EAASC,SAASmC,GACxCuC,EAAQO,OAAS,uBAAYC,UACzB,kBAAM,EAAKhE,aACPnB,EAAS4E,gBAAgBxC,GACzBpC,EAASC,SAASmC,KACxB7C,MAAM,gBAAgB6F,OAAO,MAAMC,WAAW,MAC5C,uBAAQC,KAAM,QAASC,KAAM,kBAACC,EAAA,EAAD,OAA7B,eAGJjB,EAActC,KAAK0C,GACnBH,EAAOb,IAAIgB,EAAQ9E,MACnBQ,EAAUsD,IAAIgB,EAAQ3E,UACtByE,EAAMd,IAAIgB,EAAQ1E,UACXsE,QAGZzC,MAAK,WACRH,IAAM+C,IAAN,UAAa7C,4CAAb,uBACKC,MAAK,SAAAC,GACSA,EAAIP,KACVkC,KAAI,SAAC+B,GACNnE,QAAQC,IAAIkE,GACZ,IAAK,IAAIC,EAAI,EAAGA,EAAInB,EAAcoB,OAAQD,IAClCnB,EAAcmB,GAAGV,cAAgBS,EAAIb,iBAAmBL,EAAcmB,GAAGT,cAAgBQ,EAAIxF,WAC7FsE,EAAcmB,GAAGX,UAAW,EAC5BR,EAAcmB,GAAGR,OACb,uBAAQI,KAAM,QAASC,KAAM,kBAACK,EAAA,EAAD,OAA7B,eAMnB9D,MAAK,WACF,EAAKoB,SAAS,CACV7C,UAAWkE,EACX9D,WAAW,EACXH,kBAAmBiE,EACnBhE,iBAAkBgE,Y,+BAUlC,OACI,6BACI,uBAAKsB,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIC,GAAI,IAClC,uBAAKC,KAAM,EAAGC,OAAQ,GAClB,kBAAC9G,EAAD,CAAM+G,MAAO,GAAb,uBAGA,uBACItD,MAAOG,KAAK7C,MAAMO,mBAClB2E,KAAK,QACLe,SAAUpD,KAAKnC,aACfwF,aAAa,MACbC,MAAO,CAACC,MAAO,MACf,kBAACpH,EAAD,CAAQ0D,MAAM,OAAd,OAEIG,KAAKhC,cAAc,UAI/B,uBAAKiF,KAAM,GACP,kBAAC7G,EAAD,CAAM+G,MAAO,GAAb,4BAGA,uBAAQtD,MAAOG,KAAK7C,MAAMQ,uBAClB0E,KAAK,QACLmB,SAAUxD,KAAK7C,MAAMM,cACrB6F,MAAO,CAACC,MAAO,KACfH,SAAUpD,KAAKjC,iBACnB,kBAAC5B,EAAD,CAAQ0D,MAAM,OAAd,OAEIG,KAAKhC,cAAc,eAK/B,uBAAKiF,KAAM,IACP,uBAAOQ,YAAU,EAACpB,KAAK,QAAQqB,YAAY,SAASC,OAAQ,kBAACC,EAAA,EAAD,MACrDR,SAAUpD,KAAK/B,eAG1B,uBAAKgF,KAAM,KAEf,uBAAOY,OAAQ,CAACC,EAAG,qBACZC,QAAS/D,KAAK7C,MAAMK,UACpBwG,WAAqC,KAAzBhE,KAAK7C,MAAMS,UAAmBoC,KAAK7C,MAAMI,oBAAsByC,KAAK7C,MAAMG,iBACtFjB,QAASA,S,GA1OK4H,IAAMC,WAkP5BC,cAAWlH,G,6LC7QnBmH,E,IAAAA,QACAC,E,IAAAA,MAGDC,G,IAHQlI,K,kDAIV,WAAYc,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACT4G,SAAS,EACT5E,GAAI,GACJoF,cAAe,GACfC,OAAQ,GACR9E,OAAQ,GACR+E,SAAU,GACV7H,KAAM,GACN8H,cAAe,GACf1H,SAAU,GACV2H,YAAa,GACbC,gBAAiB,GACjBC,WAAW,EACXC,gBAAiB,GACjBC,SAAS,GAEb,EAAKC,OAAS,CACVnD,KAAM,OACNoD,UAAU,EACVC,OAAQ,mDACR9B,SAJU,SAID+B,GAAO,IACLzF,EAAUyF,EAAKC,KAAf1F,OACQ,cAAXA,GACArB,QAAQC,IAAI6G,EAAKC,KAAMD,EAAKE,UAEjB,SAAX3F,EACAH,EAAA,EAAQ+F,QAAR,UAAmBH,EAAKC,KAAKvD,KAA7B,iCACkB,UAAXnC,GACPH,EAAA,EAAQF,MAAR,UAAiB8F,EAAKC,KAAKvD,KAA3B,2BAIZ,EAAKxF,QAAU,CACX,CACIC,MAAO,YACPC,UAAW,WACXC,IAAK,WACL+G,MAAO,MAGX,CACIjH,MAAO,QACPC,UAAW,cACXC,IAAK,cACL+I,OAAQ,SAACC,GACL,OAAQ,kBAAC,IAAD,CACJC,IAAKD,EACLE,UAAQ,EACRC,aAAa,iBAIzB,CACIrJ,MAAO,aACPC,UAAW,aACXC,IAAK,cAET,CACIF,MAAO,WACPC,UAAW,WACXC,IAAK,YAET,CACIF,MAAO,WACPC,UAAW,WACXC,IAAK,WACLC,OAAQ,SAACC,EAAGC,GAAJ,OAAUD,EAAEkJ,SAAS/I,cAAcF,EAAEiJ,WAC7C9I,eAAgB,CAAC,UAAW,WAEhC,CACIR,MAAO,eACPiJ,OAAQ,WACJ,OAAQ,uBAAQjD,KAAM,kBAACuD,EAAA,EAAD,MAAkBjG,QAAS,EAAKkG,WAA9C,mBAKpB,EAAKA,UAAY,WACb,EAAK7F,SAAS,CACV8E,SAAS,KAIjB,EAAKgB,SAAW,SAAAjF,GACZzC,QAAQC,IAAIwC,GACZ,EAAKb,SAAS,CACV8E,SAAS,KAIjB,EAAKiB,aAAe,SAAAlF,GAChBzC,QAAQC,IAAIwC,GACZ,EAAKb,SAAS,CACV8E,SAAS,KAIjB,EAAKkB,UAAY,WACb,EAAKhG,SAAS,CAAC4E,WAAW,IAC1B,EAAKqB,QAAUC,aAAY,WACvBzH,IAAM+C,IAAN,UAAa7C,4CAAb,8BAAgE,EAAKzB,MAAMgC,KACtEN,MAAK,SAACC,GACHT,QAAQC,IAAIQ,EAAIP,MAChB,EAAK0B,SAAS,CACVsE,cAAezF,EAAIP,KAAKiG,OAAO9B,OAC/B8B,OAAQ1F,EAAIP,KAAKiG,OACjBG,YAAa7F,EAAIP,KAAK6H,WAAWC,aACjC3B,cAAe5F,EAAIP,KAAK6H,WAAW1B,cACnC1H,SAAU8B,EAAIP,KAAK6H,WAAWpJ,SAC9BJ,KAAMkC,EAAIP,KAAK6H,WAAWxJ,KAC1B8C,OAAQZ,EAAIP,KAAK6H,WAAW1G,OAC5B+E,SAAU3F,EAAIP,KAAK6H,WAAW3B,SAC9BV,SAAS,IAE+B,OAAxCjF,EAAIP,KAAK6H,WAAWxB,gBACpB,EAAK3E,SACD,CACI,gBAAmBnB,EAAIP,KAAK6H,WAAWE,QAI/C,EAAKrG,SAAS,CAAC,gBAAmBnB,EAAIP,KAAK6H,WAAWxB,kBAEvB,SAA/B9F,EAAIP,KAAK6H,WAAW1G,SACpB6G,cAAc,EAAKL,SACnB,EAAKjG,SAAS,CAAC4E,WAAW,QAGjCzF,OAAM,SAACC,GACJC,EAAA,EAAaD,MAAM,CACfE,QAAS,iBACTC,YAAaH,EAAMI,SAAN,kBAA4BJ,EAAMI,SAASC,OAA3C,eAAwDL,EAAMI,SAASE,YAAe,sBACnGC,QAAS,WACLvB,QAAQC,IAAI,4BAGpB,EAAK2B,SAAS,CAACP,OAAQ,YAAaoF,gBAAiB,cAErDyB,cAAc,EAAKL,cAE5B,MA9IQ,E,iEAsJf,IAAI/G,EAAKqH,IAAGC,MAAMzG,KAAK9C,MAAMwJ,SAASxH,OAAQ,CAACyH,mBAAmB,IAAOxH,GACzEa,KAAKC,SAAS,CAACd,GAAIA,M,0CAKnBa,KAAKiG,c,6CAKLM,cAAcvG,KAAKkG,W,+BAKnB,IAAI1I,EAAYwC,KAAK7C,MAAM4G,QAC3B,OACI,6BACKvG,EACG,uBAAO6E,KAAK,UACR,uBAAMA,KAAK,WACJ,6BACP,uBAAKuE,MAAM,UACP,uBAAK3D,KAAM,EACNK,MAAO,CAACuD,QAAS,cAAeC,eAAgB,SAAUC,WAAY,WACvE,uBAAU1G,KAAK,SACL2G,QAASC,SAAUjH,KAAK7C,MAAMoH,cAAgBvE,KAAK7C,MAAMwH,YAAe,KACxEjF,OAAQM,KAAK7C,MAAM2H,mBAEjC,uBAAKxB,MAAO,CAACuD,QAAS,cAAeC,eAAgB,SAAUC,WAAY,UACtE9D,KAAM,GACP,2BACI,kBAACoB,EAAD,CAAOlB,MAAO,GAAd,WAA0BnD,KAAK7C,MAAMuC,OAAOwH,eAC5C,kBAAC7C,EAAD,KACI,uBAAQhE,KAAK,UAAUiC,KAAM,kBAAC6E,EAAA,EAAD,MAAqB9E,KAAK,SAAvD,wBAOZ,uBAAKiB,MAAO,CAACuD,QAAS,cAAeC,eAAgB,SAAUC,WAAY,UACtE9D,KAAM,GACP,2BACI,kBAACoB,EAAD,CAAOlB,MAAO,GAAInD,KAAK7C,MAAMuH,eAC7B,kBAACL,EAAD,CAAOlB,MAAO,GAAInD,KAAK7C,MAAMP,QAKrC,uBAAK0G,MAAO,CAACuD,QAAS,cAAeC,eAAgB,SAAUC,WAAY,UACtE9D,KAAM,GAEP,kBAAC,IAAD,CACImE,OAAQ,IACRC,IAAKrH,KAAK7C,MAAMyH,gBAAiBc,UAAQ,MAIrD,2BACI,uBACI3B,QAAS/D,KAAK7C,MAAMK,UACpBwG,WAAYhE,KAAK7C,MAAMqH,OACvBnI,QAAS2D,KAAK3D,WAEtB,uBACIC,MAAM,eACNyI,QAAS/E,KAAK7C,MAAM4H,QACpBuC,KAAMtH,KAAK+F,SACXwB,SAAUvH,KAAKgG,cAEf,kBAAC5B,EAAYpE,KAAKgF,OACd,uBAAGwC,UAAU,wBACT,kBAACC,EAAA,EAAD,OAEJ,uBAAGD,UAAU,mBAAb,sD,GAnORvD,IAAMC,YA8OfC,cAAWG,G,UCnPpBoD,G,kDAMF,WAAYxK,GAAQ,IAAD,sBACf,cAAMA,GADS,IAGRyK,EAAWzK,EAAXyK,QAHQ,OAIf,EAAKxK,MAAQ,CACTyK,UAAWD,EAAQlG,IAAI,cAE3B/C,IAAMmJ,SAASC,QAAQC,OAAO,eAAiB,EAAK5K,MAAMyK,UAP3C,E,qDAYf,OACI,6BACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,IAAIC,UAAWjL,IACjC,kBAAC,IAAD,CAAOgL,KAAK,aAAaC,UAAW5D,U,GAtBtCL,IAAMC,WA+BTiE,gBAAYT,IC5BPU,QACW,cAA7BC,OAAO3B,SAAS4B,UAEe,UAA7BD,OAAO3B,SAAS4B,UAEhBD,OAAO3B,SAAS4B,SAASC,MACvB,2D,uBCVNC,IAASjD,OACL,kBAAC,KAAD,KACI,kBAACkD,GAAA,EAAD,KAEI,kBAAC,GAAD,QAKRC,SAASC,eAAe,SDkHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjK,MAAK,SAAAkK,GACJA,EAAaC,gBAEd5J,OAAM,SAAAC,GACLhB,QAAQgB,MAAMA,EAAME,c","file":"static/js/main.1ee63a0c.chunk.js","sourcesContent":["import React from \"react\";\nimport axios from 'axios'\nimport {Button, Col, Input, notification, Popconfirm, Row, Select, Table, Typography} from 'antd';\nimport {EditOutlined, EyeOutlined, SearchOutlined} from '@ant-design/icons'\nimport {withRouter} from \"react-router-dom\";\n\nconst {Option} = Select;\nconst {Text} = Typography\n\nconst columns = [\n    {\n        title: 'FOSS',\n        dataIndex: 'foss',\n        key: 'foss',\n        sorter: (a, b) => a.foss.localeCompare(b.foss),\n        sortDirections: ['descend', 'ascend']\n    },\n    {\n        title: 'Tutorial Name',\n        dataIndex: 'tutorial',\n        key: 'tutorial',\n        sorter: (a, b) => a.tutorial.localeCompare(b.tutorial),\n        sortDirections: ['descend', 'ascend']\n    },\n    {\n        title: 'Language',\n        dataIndex: 'language',\n        key: 'language',\n        sorter: (a, b) => a.language.localeCompare(b.language),\n        sortDirections: ['descend', 'ascend']\n    }, {\n        title: 'Edit Video',\n        dataIndex: 'button',\n        key: 'button',\n    },\n];\n\nclass TutorialsListComponent extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            tutorials: [],\n            filteredTutorials: [],\n            tutorialsInTable: [],\n            searchFilteredTable: [],\n            isLoading: true,\n            isTutDisabled: true,\n            fossDropdownOption: 'All',\n            tutorialDropdownOption: 'All',\n            searchBox: ''\n        }\n        this.filterFosses = this.filterFosses.bind(this)\n        this.filterTutorials = this.filterTutorials.bind(this)\n        this.renderOptions = this.renderOptions.bind(this);\n        this.searchTable = this.searchTable.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleSubmit(tut_id, lang_id) {\n        console.log(tut_id, lang_id)\n        const data = new FormData();\n        data.append('tutorial_detail', tut_id);\n        data.append('language', lang_id);\n        axios.post(`${process.env.REACT_APP_API_URL}/process_tutorials`, data)\n            .then((res) => {\n                console.log(res.data)\n                this.props.history.push({pathname: '/dashboard', search: `id=${res.data.id}`});\n            })\n            .catch((error) => {\n                notification.error({\n                    message: 'Error Occurred',\n                    description: error.response ? `Status: ${error.response.status} \\n ${error.response.statusText}` : 'Some Error Occurred',\n                    onClick: () => {\n                        console.log('Notification Clicked!');\n                    },\n                });\n            })\n    }\n\n\n    async filterFosses(value, option) {\n        console.log(value)\n        if (value === 'All') {\n            let all = this.state.tutorials\n            console.log(all)\n\n            this.setState({\n                fossDropdownOption: 'All',\n                filteredTutorials: all,\n                isTutDisabled: true,\n                tutorialsInTable: all,\n                tutorialDropdownOption: 'All'\n            })\n        } else {\n            let tuts = this.state.tutorials\n            tuts = await tuts.filter((item) => {\n                return item.foss === value\n            })\n            console.log(tuts)\n            this.setState({\n                fossDropdownOption: value,\n                filteredTutorials: tuts,\n                isTutDisabled: false,\n                tutorialsInTable: tuts\n            })\n        }\n    }\n\n    async filterTutorials(value, option) {\n        if (value === 'All') {\n            let tuts = this.state.filteredTutorials\n            tuts = await tuts.filter((item) => {\n                return item.foss === this.state.fossDropdownOption\n            })\n            this.setState({tutorialsInTable: tuts, tutorialDropdownOption: value})\n\n        } else {\n            let tuts = this.state.filteredTutorials\n            tuts = await tuts.filter((item) => {\n                return item.tutorial === value\n            })\n            console.log(tuts)\n            this.setState({tutorialsInTable: tuts, tutorialDropdownOption: value})\n        }\n    }\n\n\n    renderOptions(type) {\n        let options = new Set()\n        let optionRender = []\n        if(type==='foss'){\n            this.state.tutorials.map((item) => {\n                options.add(item.foss)\n            })\n        }else{\n            this.state.filteredTutorials.map((item) => {\n                options.add(item.tutorial)\n            })\n        }\n\n        options = Array.from(options)\n        options.map((item, index) => {\n            optionRender.push(<Option key={index} value={item}>{item}</Option>)\n        })\n\n        return optionRender\n\n    }\n\n    async searchTable(e) {\n        let value = e.target.value\n        let filteredList = this.state.tutorialsInTable\n        filteredList = await filteredList.filter(item => {\n            let booltut = item.tutorial.toLowerCase().includes(value.toLowerCase())\n            let boolfoss = item.foss.toLowerCase().includes(value.toLowerCase())\n            let boollang = item.language.toLowerCase().includes(value.toLowerCase())\n            return booltut || boollang || boolfoss\n        })\n        this.setState({searchFilteredTable: filteredList, searchBox: value})\n\n    }\n\n    componentDidMount() {\n        let filtered_tuts = []\n        let fosses = new Set()\n        let tutorials = new Set()\n        let langs = new Set()\n        axios.get(`${process.env.REACT_APP_API_URL}/tutorials`)\n            .then(res => {\n                let data = res.data\n                data.map((tutorial) => {\n                    let tut_obj = {};\n                    tut_obj.key = tutorial.tutorial_detail.id\n                    tut_obj.foss = tutorial.foss_category.name\n                    tut_obj.tutorial = tutorial.tutorial_detail.tutorial\n                    tut_obj.language = tutorial.language.name\n                    tut_obj.isEdited = false\n                    tut_obj.tutorial_id = tutorial.tutorial_detail.id\n                    tut_obj.language_id = tutorial.language.id\n                    tut_obj.button = <Popconfirm onConfirm={\n                        () => this.handleSubmit(\n                            tutorial.tutorial_detail.id,\n                            tutorial.language.id)\n                    } title=\"Are you sure?\" okText=\"Yes\" cancelText=\"No\">\n                        <Button size={'large'} icon={<EditOutlined/>}\n                        >Edit\n                            Video</Button></Popconfirm>\n                    filtered_tuts.push(tut_obj)\n                    fosses.add(tut_obj.foss)\n                    tutorials.add(tut_obj.tutorial)\n                    langs.add(tut_obj.language)\n                    return filtered_tuts\n                    // this.setState({tutorials: existing_tut})\n                })\n            }).then(() => {\n            axios.get(`${process.env.REACT_APP_API_URL}/process_tutorials`)\n                .then(res => {\n                    let data = res.data\n                    data.map((tut) => {\n                        console.log(tut)\n                        for (let i = 0; i < filtered_tuts.length; i++) {\n                            if (filtered_tuts[i].tutorial_id === tut.tutorial_detail && filtered_tuts[i].language_id === tut.language) {\n                                filtered_tuts[i].isEdited = true\n                                filtered_tuts[i].button =\n                                    <Button size={'large'} icon={<EyeOutlined/>}>View</Button>\n                            }\n                        }\n                    })\n\n                })\n                .then(() => {\n                    this.setState({\n                        tutorials: filtered_tuts,\n                        isLoading: false,\n                        filteredTutorials: filtered_tuts,\n                        tutorialsInTable: filtered_tuts\n                    })\n\n\n                })\n        })\n    }\n\n    render() {\n\n        return (\n            <div>\n                <Row xs={2} sm={4} md={6} lg={10} xl={10}>\n                    <Col span={6} offset={1}>\n                        <Text level={4}>\n                            FOSS &nbsp; &nbsp; &nbsp;\n                        </Text>\n                        <Select\n                            value={this.state.fossDropdownOption}\n                            size='large'\n                            onChange={this.filterFosses}\n                            defaultValue=\"All\"\n                            style={{width: 120}}>\n                            <Option value='All'>All</Option>\n                            {\n                                this.renderOptions('foss')\n                            }\n                        </Select>\n                    </Col>\n                    <Col span={6}>\n                        <Text level={3}>\n                            Tutorial  &nbsp; &nbsp; &nbsp;\n                        </Text>\n                        <Select value={this.state.tutorialDropdownOption}\n                                size='large'\n                                disabled={this.state.isTutDisabled}\n                                style={{width: 120}}\n                                onChange={this.filterTutorials}>\n                            <Option value='All'>All</Option>\n                            {\n                                this.renderOptions('tutorials')\n\n                            }\n                        </Select>\n                    </Col>\n                    <Col span={10}>\n                        <Input allowClear size=\"large\" placeholder=\"Search\" prefix={<SearchOutlined/>}\n                               onChange={this.searchTable}/>\n\n                    </Col>\n                    <Col span={1}/>\n                </Row>\n                <Table scroll={{y: 'calc(100vh - 4em)'}}\n                       loading={this.state.isLoading}\n                       dataSource={this.state.searchBox !== '' ? this.state.searchFilteredTable : this.state.tutorialsInTable}\n                       columns={columns}/>\n            </div>\n\n\n        );\n    }\n}\n\nexport default withRouter(TutorialsListComponent)\n","import React from \"react\";\nimport {withRouter} from \"react-router-dom\";\nimport qs from 'qs'\nimport axios from 'axios'\nimport {Button, Col, Modal, notification, Progress, Row, Space, Spin, Table, Typography} from \"antd\";\nimport ReactAudioPlayer from 'react-audio-player';\nimport ReactPlayer from \"react-player\";\nimport {AudioOutlined, InboxOutlined, DownloadOutlined} from '@ant-design/icons'\nimport {Upload, message} from 'antd';\n\nconst {Dragger} = Upload;\nconst {Title, Text} = Typography;\n\n\nclass Dashboard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n            id: '',\n            current_count: '',\n            chunks: [],\n            status: '',\n            checksum: '',\n            foss: '',\n            tutorial_name: '',\n            language: '',\n            total_count: '',\n            processed_video: '',\n            processed: false,\n            progress_status: '',\n            visible: false\n        }\n        this.config = {\n            name: 'file',\n            multiple: true,\n            action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',\n            onChange(info) {\n                const {status} = info.file;\n                if (status !== 'uploading') {\n                    console.log(info.file, info.fileList);\n                }\n                if (status === 'done') {\n                    message.success(`${info.file.name} file uploaded successfully.`);\n                } else if (status === 'error') {\n                    message.error(`${info.file.name} file upload failed.`);\n                }\n            },\n        }\n        this.columns = [\n            {\n                title: 'Chunk No.',\n                dataIndex: 'chunk_no',\n                key: 'chunk_no',\n                width: '5%'\n\n            },\n            {\n                title: 'Audio',\n                dataIndex: 'audio_chunk',\n                key: 'audio_chunk',\n                render: (audio_chunk) => {\n                    return (<ReactAudioPlayer\n                        src={audio_chunk}\n                        controls\n                        controlsList=\"nodownload\"\n                    />)\n                }\n            },\n            {\n                title: 'Start Time',\n                dataIndex: 'start_time',\n                key: 'start_time',\n            },\n            {\n                title: 'End Time',\n                dataIndex: 'end_time',\n                key: 'end_time',\n            },\n            {\n                title: 'Subtitle',\n                dataIndex: 'subtitle',\n                key: 'subtitle',\n                sorter: (a, b) => a.subtitle.localeCompare(b.subtitle),\n                sortDirections: ['descend', 'ascend']\n            },\n            {\n                title: 'Change Audio',\n                render: () => {\n                    return (<Button icon={<AudioOutlined/>} onClick={this.showModal}>Change Audio</Button>\n                    )\n                }\n            },\n        ];\n        this.showModal = () => {\n            this.setState({\n                visible: true,\n            });\n        };\n\n        this.handleOk = e => {\n            console.log(e);\n            this.setState({\n                visible: false,\n            });\n        };\n\n        this.handleCancel = e => {\n            console.log(e);\n            this.setState({\n                visible: false,\n            });\n        };\n\n        this.fetchData = () => {\n            this.setState({processed: false})\n            this.apiLoop = setInterval(() => {\n                axios.get(`${process.env.REACT_APP_API_URL}/process_tutorials/${this.state.id}`)\n                    .then((res) => {\n                        console.log(res.data)\n                        this.setState({\n                            current_count: res.data.chunks.length,\n                            chunks: res.data.chunks,\n                            total_count: res.data.video_data.total_chunks,\n                            tutorial_name: res.data.video_data.tutorial_name,\n                            language: res.data.video_data.language,\n                            foss: res.data.video_data.foss,\n                            status: res.data.video_data.status,\n                            checksum: res.data.video_data.checksum,\n                            loading: false\n                        });\n                        if (res.data.video_data.processed_video === null) {\n                            this.setState(\n                                {\n                                    'processed_video': res.data.video_data.video\n                                }\n                            )\n                        } else {\n                            this.setState({'processed_video': res.data.video_data.processed_video})\n                        }\n                        if (res.data.video_data.status === 'done') {\n                            clearInterval(this.apiLoop);\n                            this.setState({processed: true})\n                        }\n                    })\n                    .catch((error) => {\n                        notification.error({\n                            message: 'Error Occurred',\n                            description: error.response ? `Status: ${error.response.status} \\n ${error.response.statusText}` : 'Some Error Occurred',\n                            onClick: () => {\n                                console.log('Notification Clicked!');\n                            },\n                        });\n                        this.setState({status: 'not found', progress_status: 'exception'})\n\n                        clearInterval(this.apiLoop)\n                    })\n            }, 2000)\n\n        }\n\n\n    }\n\n    componentWillMount() {\n        let id = qs.parse(this.props.location.search, {ignoreQueryPrefix: true}).id\n        this.setState({id: id})\n\n    }\n\n    componentDidMount() {\n        this.fetchData()\n    }\n\n\n    componentWillUnmount() {\n        clearInterval(this.apiLoop)\n    }\n\n\n    render() {\n        let isLoading = this.state.loading\n        return (\n            <div>\n                {isLoading ?\n                    <Space size=\"middle\">\n                        <Spin size=\"large\"/>\n                    </Space> : <div>\n                        <Row align=\"middle\">\n                            <Col span={4}\n                                 style={{display: 'inline-flex', justifyContent: 'center', alignItems: 'center'}}>\n                                <Progress type=\"circle\"\n                                          percent={parseInt((this.state.current_count / this.state.total_count) * 100)}\n                                          status={this.state.progress_status}/>\n                            </Col>\n                            <Col style={{display: 'inline-flex', justifyContent: 'center', alignItems: 'center'}}\n                                 span={4}>\n                                <Typography>\n                                    <Title level={4}>Status: {this.state.status.toUpperCase()}</Title>\n                                    <Title>\n                                        <Button type=\"primary\" icon={<DownloadOutlined/>} size='large'>Download\n                                            Tutorial</Button>\n\n                                    </Title>\n                                </Typography>\n                            </Col>\n\n                            <Col style={{display: 'inline-flex', justifyContent: 'center', alignItems: 'center'}}\n                                 span={8}>\n                                <Typography>\n                                    <Title level={3}>{this.state.tutorial_name}</Title>\n                                    <Title level={4}>{this.state.foss}</Title>\n\n                                </Typography>\n                            </Col>\n\n                            <Col style={{display: 'inline-flex', justifyContent: 'center', alignItems: 'center'}}\n                                 span={8}>\n\n                                <ReactPlayer\n                                    height={200}\n                                    url={this.state.processed_video} controls/>\n                            </Col>\n\n                        </Row>\n                        <Row>\n                            <Table\n                                loading={this.state.isLoading}\n                                dataSource={this.state.chunks}\n                                columns={this.columns}/>\n                        </Row>\n                        <Modal\n                            title=\"Change Audio\"\n                            visible={this.state.visible}\n                            onOk={this.handleOk}\n                            onCancel={this.handleCancel}\n                        >\n                            <Dragger {...this.config}>\n                                <p className=\"ant-upload-drag-icon\">\n                                    <InboxOutlined/>\n                                </p>\n                                <p className=\"ant-upload-text\">Click or drag audio to this area to upload</p>\n                            </Dragger>\n                        </Modal>\n                    </div>}\n\n            </div>)\n    }\n\n\n}\n\nexport default withRouter(Dashboard)\n","import React from 'react';\nimport './App.css';\nimport TutorialsListComponent from \"./components/tutorialsList/tutorialsList.component\";\nimport {Route, Switch} from 'react-router-dom';\nimport Dashboard from \"./pages/Dashboard/dashboard.page\";\nimport { instanceOf } from 'prop-types';\nimport { withCookies, Cookies } from 'react-cookie';\nimport axios from \"axios\";\n\nclass App extends React.Component {\n    static propTypes = {\n        cookies: instanceOf(Cookies).isRequired\n    };\n\n\n    constructor(props) {\n        super(props);\n\n        const {cookies} = props;\n        this.state = {\n            csrftoken: cookies.get('csrftoken')\n        };\n        axios.defaults.headers.common['X-CSRFToken'] = this.state.csrftoken // for all requests\n\n    }\n\n    render() {\n        return (\n            <div>\n                <Switch>\n                    <Route exact path='/' component={TutorialsListComponent}/>\n                    <Route path='/dashboard' component={Dashboard}/>\n                </Switch>\n\n            </div>\n\n        )\n    };\n}\n\nexport default withCookies(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from \"react-router-dom\";\nimport {CookiesProvider} from 'react-cookie';\n\nReactDOM.render(\n    <HashRouter>\n        <CookiesProvider>\n\n            <App/>\n        </CookiesProvider>\n\n    </HashRouter>\n    ,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}