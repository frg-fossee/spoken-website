{"version":3,"sources":["components/allotedTutorialsList/allottedTutorialsList.component.jsx","components/processesTutorialsList/processTutorialsList.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Option","AllottedTutorialsList","state","allottedTutorials","languages","returnOptions","bind","tutorial_id","temp","lang","this","value","axios","get","then","res","separateTutorials","data","language","setState","map","item","console","log","tutorial_detail","id","undefined","push","name","size","itemLayout","dataSource","renderItem","Item","actions","defaultValue","style","width","placement","title","arrowPointAtCenter","icon","EditOutlined","Meta","Text","strong","tutorial","description","foss_category","React","Component","Title","Paragraph","ProcessedTutorials","processedTutorials","cardLoading","process","setTimeout","isCardLoading","grid","gutter","xs","sm","md","lg","xl","xxl","loading","hoverable","cover","Input","height","active","url","video","controls","Button","App","className","href","level","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e0177f8b.chunk.js","sourcesContent":["import React from 'react'\nimport axios from 'axios'\nimport {Button, List, Select, Tooltip, Typography} from \"antd\";\nimport {EditOutlined} from '@ant-design/icons';\n\nconst {Option} = Select;\n\nclass AllottedTutorialsList extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            allottedTutorials: [],\n            languages: {}\n        }\n\n        this.returnOptions = this.returnOptions.bind(this);\n\n\n    }\n\n    returnOptions (tutorial_id) {\n        // this.state.languages._tutorial_id.map((item)=>{\n        //     return <Option value={item}>{item}</Option>\n        // }\n        let temp = tutorial_id\n        let lang = this.state.languages\n        return <Option value={lang[temp]}>{lang[temp]}</Option>\n    }\n\n    componentDidMount() {\n        axios.get('http://127.0.0.1:8000/videoprocessing/api/tutorials')\n            .then(res => {\n                let separateTutorials = res.data\n                let language = {}\n                this.setState({allottedTutorials: res.data})\n                separateTutorials.map(\n                    (item) => {\n                        console.log(item.tutorial_detail.id)\n                        if (language[item.tutorial_detail.id] === undefined) {\n                            language[item.tutorial_detail.id] = []\n                        }\n                        language[item.tutorial_detail.id].push(item.language.name)\n                    }\n                )\n                return language\n            })\n            .then((language) => {\n                this.setState({languages: language})\n            })\n\n    }\n\n    render() {\n        return (\n            <List\n                size=\"large\"\n                itemLayout=\"horizontal\"\n                dataSource={this.state.allottedTutorials}\n                renderItem={(item) => (\n                    <List.Item\n                        actions={[<Select size='large' defaultValue={item.language.name}\n                                          style={{width: 120}}>\n                            {\n                                this.returnOptions(item.tutorial_detail.id)\n                            }\n                        </Select>,\n                            <Tooltip placement=\"topLeft\" title=\"Change audio of any part in video\" arrowPointAtCenter>\n                                <Button\n                                    size={'large'}\n                                    icon={<EditOutlined/>}\n                                >Edit Video</Button>\n                            </Tooltip>]}\n                    >\n\n                        <List.Item.Meta\n                            title={\n                                <Typography.Text\n                                    strong\n                                >\n                                    {\n                                        item.tutorial_detail.tutorial\n                                    }\n                                </Typography.Text>\n                            }\n                            description={<Typography.Text>{item.foss_category.name}</Typography.Text>}\n                        />\n                    </List.Item>\n                )}\n            />);\n    }\n}\n\nexport default AllottedTutorialsList\n","import React from 'react'\nimport {Avatar, Button, Card, Divider, List, Skeleton, Tooltip, Typography} from 'antd';\nimport {EditOutlined} from '@ant-design/icons';\nimport ReactPlayer from 'react-player'\nimport axios from 'axios'\n\nconst {Meta} = Card;\nconst {Title,Text, Paragraph} = Typography;\n\nclass ProcessedTutorials extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            processedTutorials: ['skeleton', 'skeleton', 'skeleton', 'skeleton', 'skeleton', 'skeleton'],\n            cardLoading: true\n        }\n    }\n\n    componentDidMount() {\n        axios.get(`${process.env.REACT_APP_API_URL}/process_tutorials`)\n            .then(res => {\n                this.setState({processedTutorials: res.data})\n\n            })\n            .then(() => {\n                    setTimeout(\n                        () => this.setState({cardLoading: false}),\n                        1000)\n                }\n            )\n    }\n\n    render() {\n        const isCardLoading = this.state.cardLoading;\n        return (\n            <div>\n\n                <List\n                    grid={{\n                        gutter: 32,\n                        xs: 1,\n                        sm: 2,\n                        md: 4,\n                        lg: 4,\n                        xl: 4,\n                        xxl: 4,\n                    }} dataSource={this.state.processedTutorials}\n                    renderItem={item => (\n                        <List.Item>\n                            <Card\n                                loading={isCardLoading}\n                                hoverable\n                                size=\"small\"\n                                cover=\n                                    {\n                                        isCardLoading\n                                            ?\n                                            <Skeleton.Input style={{width: '300px', height: '300px'}} active={true}\n                                                            size='default'/>\n                                            : <ReactPlayer\n                                                url={item.video}\n                                                controls\n                                                width={'100%'}\n                                                height={'100%'}\n                                            />\n                                    }\n\n\n                                actions={[\n                                    isCardLoading ?\n                                        <Skeleton.Button active size='large'/>\n                                        :\n                                        <Tooltip placement=\"topLeft\" title=\"Change audio of any part in video\" arrowPointAtCenter>\n                                        <Button\n                                            size={'large'}\n                                            icon={<EditOutlined/>}\n                                        >Edit Video</Button>\n                                        </Tooltip>\n\n                                ]}\n\n                            >\n                                <Meta\n                                    title={<Text strong>\n                                        Command Line Arguments in C\n                                    </Text>}\n                                    description={\n                                        <Typography>\n                                            <Paragraph>\n                                                FOSS : Advanced C\n                                            </Paragraph>\n                                            <Paragraph>\n                                                Language: English\n                                            </Paragraph>\n                                            <Paragraph>\n                                                Total Chunks: 53\n                                            </Paragraph>\n                                        </Typography>\n                                    }\n                                />\n                            </Card> </List.Item>\n                    )}\n                />\n            </div>\n\n        );\n    }\n}\n\nexport default ProcessedTutorials\n","import React from 'react';\nimport './App.css';\nimport AllottedTutorialsList from \"./components/allotedTutorialsList/allottedTutorialsList.component\";\nimport {Breadcrumb, Divider, Typography} from \"antd\";\nimport ProcessedTutorials from \"./components/processesTutorialsList/processTutorialsList.component\";\nconst {Title} = Typography\nfunction App() {\n    return (\n        <div className='App'>\n            <Breadcrumb>\n                <Breadcrumb.Item> <a href=\"/\">Home</a></Breadcrumb.Item>\n                <Breadcrumb.Item>\n                    Tutorials List\n                </Breadcrumb.Item>\n            </Breadcrumb>\n            <Divider />\n            <Title level={2}> Processed Tutorials</Title>\n            <Divider />\n            <ProcessedTutorials/>\n            <Divider />\n            <Title level={2}> Allotted Tutorials</Title>\n            <Divider />\n            <AllottedTutorialsList/>\n        </div>\n\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}