{"version":3,"sources":["pages/tutorialsList/tutorialsList.page.jsx","components/errors/mediaNotFound.jsx","components/errors/error403.component.jsx","components/revertModal/revertModal.component.jsx","pages/dashboard/dashboard.page.jsx","App.js","serviceWorker.js","index.js"],"names":["Option","Text","columns","title","dataIndex","key","sorter","a","b","foss","localeCompare","sortDirections","tutorial","language","filters","text","value","onFilter","record","submission_status","includes","render","type","style","color","TutorialsListPage","props","state","tutorials","filteredTutorials","tutorialsInTable","searchFilteredTable","isLoading","isTutDisabled","fossDropdownOption","tutorialDropdownOption","searchBox","filterFosses","bind","filterTutorials","renderOptions","searchTable","handleSubmit","tut_id","lang_id","console","log","data","FormData","append","axios","post","process","then","res","history","push","pathname","search","id","catch","error","notification","message","description","response","status","statusText","onClick","option","all","this","setState","tuts","filter","item","options","Set","optionRender","map","add","Array","from","index","e","target","filteredList","booltut","toLowerCase","boolfoss","boollang","boolstatus","filtered_tuts","fosses","langs","get","tut_obj","tutorial_detail","foss_category","name","isEdited","tutorial_id","language_id","button","onConfirm","okText","cancelText","size","icon","EditOutlined","tut","i","length","EyeOutlined","href","Item","HomeOutlined","VideoCameraOutlined","xs","sm","md","lg","xl","span","offset","level","onChange","defaultValue","width","disabled","allowClear","placeholder","prefix","SearchOutlined","backgroundColor","loading","dataSource","React","Component","withRouter","MediaNotFound","extra","Error403Component","subTitle","TabPane","RevertModal","toggleSplitView","splitView","handleChangeCompare","subtitle","oldValue","oldDropDownValue","newValue","newDropDownValue","resetDropdown","revertModalVisible","revertHandleCancel","revertChunk","chunk_no","date","d","Date","toDateString","toTimeString","split","audio_chunk","src","controls","controlsList","history_id","className","footer","visible","onCancel","tab","align","idx","defaultChecked","Title","Dashboard","ref","player","togglePlayButton","playing","closeCommentModal","isCommentVisible","pauseVideo","video","chunk","selected_chunk","current_running_chunk","chunks","start_seconds","total_chunks","total_count","end_seconds","playedSeconds","currentSeconds","nextSeconds","currentRunningChunk","prevSeconds","Math","floor","seekTo","startRecording","stopRecording","onSave","blobObject","File","blob","file","downloadURL","blobURL","audio_file","isUploadDisabled","showComment","submitTutorial","formData","comment_temp","openNotificationWithIcon","closeSubmitModal","isSubmitVisible","showSubmitModal","current_count","checksum","tutorial_name","processed_video","processed","progress_status","uploading","selected_chunk_sub","revisionData","revisionsTableLoading","revertChunkSelected","remove","comment","handleChange","revertShowModal","handleChangeStatus","meta","handleUpload","put","fetchData","handleCancel","AudioOutlined","changeAudioShowModal","RollbackOutlined","revisions","sutitle","current_chunk","start_time","setTimeout","seconds","handleOk","apiLoop","setInterval","video_data","clearInterval","recordedBlob","qs","parse","location","ignoreQueryPrefix","status_text","LoadingOutlined","display","justifyContent","alignItems","percent","parseInt","SendOutlined","MessageOutlined","fluid","preload","height","playsInline","Input","active","onOk","okButtonProps","marginTop","gutter","mode","label","onProgress","url","textAlign","shape","PauseOutlined","CaretRightOutlined","initialFiles","canRemove","onChangeStatus","accept","multiple","autoUpload","maxFiles","inputContent","onStop","onData","strokeColor","download","TextArea","autoSize","Paragraph","minRows","maxRows","rows","App","cookies","csrftoken","defaults","headers","common","exact","path","component","TutorialsListComponent","withCookies","Boolean","window","hostname","match","ReactDOM","CookiesProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d56d8f16.chunk.js","sourcesContent":["import React from \"react\";\nimport axios from 'axios'\nimport {Breadcrumb, Button, Col, Divider, Input, notification, Popconfirm, Row, Select, Table, Typography} from 'antd';\nimport {EditOutlined, EyeOutlined, HomeOutlined, SearchOutlined, VideoCameraOutlined} from '@ant-design/icons'\nimport {withRouter} from \"react-router-dom\";\n\nconst {Option} = Select;\nconst {Text} = Typography\n\nconst columns = [\n    {\n        title: 'FOSS',\n        dataIndex: 'foss',\n        key: 'foss',\n        sorter: (a, b) => a.foss.localeCompare(b.foss),\n        sortDirections: ['descend', 'ascend']\n    },\n    {\n        title: 'Tutorial Name',\n        dataIndex: 'tutorial',\n        key: 'tutorial',\n        sorter: (a, b) => a.tutorial.localeCompare(b.tutorial),\n        sortDirections: ['descend', 'ascend']\n    },\n    {\n        title: 'Language',\n        dataIndex: 'language',\n        key: 'language',\n        sorter: (a, b) => a.language.localeCompare(b.language),\n        sortDirections: ['descend', 'ascend']\n    }, {\n        title: 'Status',\n        dataIndex: 'submission_status',\n        key: 'submission_status',\n        filters: [\n            {text: 'Submitted for Review', value: 'submitted'},\n            {text: 'Draft', value: 'draft'},\n            {text: 'Not Initialized', value: 'not_initialized'},\n            {text: 'Accepted', value: 'accepted'},\n            {text: 'Rejected', value: 'rejected'},\n        ],\n        // filteredValue: filteredInfo.submission_status || null,\n        onFilter: (value, record) => record.submission_status.includes(value),\n        render: value => {\n            if (value === 'not_initialized')\n                return <Text type=\"secondary\">Not Initialized</Text>\n            if (value === 'draft')\n                return <Text style={{color: '#1890ff'}} >Draft</Text>\n            if (value === 'submitted')\n                return <Text type=\"warning\">Submitted for Review</Text>\n            if (value === 'accepted')\n                return <Text style={{color: 'green'}}>Accepted</Text>\n            if (value === 'rejected')\n                return <Text type=\"danger\">Rejected</Text>\n        }\n    }, {\n        title: 'Edit Video',\n        dataIndex: 'button',\n        key: 'button',\n    },\n];\n\nclass TutorialsListPage extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            tutorials: [],\n            filteredTutorials: [],\n            tutorialsInTable: [],\n            searchFilteredTable: [],\n            isLoading: true,\n            isTutDisabled: true,\n            fossDropdownOption: 'All',\n            tutorialDropdownOption: 'All',\n            searchBox: ''\n        }\n        this.filterFosses = this.filterFosses.bind(this)\n        this.filterTutorials = this.filterTutorials.bind(this)\n        this.renderOptions = this.renderOptions.bind(this);\n        this.searchTable = this.searchTable.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleSubmit(tut_id, lang_id) {\n        console.log(tut_id, lang_id)\n        const data = new FormData();\n        data.append('tutorial_detail', tut_id);\n        data.append('language', lang_id);\n        axios.post(`${process.env.REACT_APP_API_URL}/process_tutorials`, data)\n            .then((res) => {\n                console.log(res.data)\n                this.props.history.push({pathname: '/dashboard', search: `id=${res.data.id}`});\n            })\n            .catch((error) => {\n                notification.error({\n                    message: 'Error Occurred',\n                    description: error.response ? `Status: ${error.response.status} \\n ${error.response.statusText}` : 'Some Error Occurred',\n                    onClick: () => {\n                        console.log('Notification Clicked!');\n                    },\n                });\n            })\n    }\n\n\n    async filterFosses(value, option) {\n        console.log(value)\n        if (value === 'All') {\n            let all = this.state.tutorials\n            console.log(all)\n\n            this.setState({\n                fossDropdownOption: 'All',\n                filteredTutorials: all,\n                isTutDisabled: true,\n                tutorialsInTable: all,\n                tutorialDropdownOption: 'All'\n            })\n        } else {\n            let tuts = this.state.tutorials\n            tuts = await tuts.filter((item) => {\n                return item.foss === value\n            })\n            console.log(tuts)\n            this.setState({\n                fossDropdownOption: value,\n                filteredTutorials: tuts,\n                isTutDisabled: false,\n                tutorialsInTable: tuts\n            })\n        }\n    }\n\n    async filterTutorials(value, option) {\n        if (value === 'All') {\n            let tuts = this.state.filteredTutorials\n            tuts = await tuts.filter((item) => {\n                return item.foss === this.state.fossDropdownOption\n            })\n            this.setState({tutorialsInTable: tuts, tutorialDropdownOption: value})\n\n        } else {\n            let tuts = this.state.filteredTutorials\n            tuts = await tuts.filter((item) => {\n                return item.tutorial === value\n            })\n            console.log(tuts)\n            this.setState({tutorialsInTable: tuts, tutorialDropdownOption: value})\n        }\n    }\n\n\n    renderOptions(type) {\n        let options = new Set()\n        let optionRender = []\n        if (type === 'foss') {\n            this.state.tutorials.map((item) => {\n                options.add(item.foss)\n            })\n        } else {\n            this.state.filteredTutorials.map((item) => {\n                options.add(item.tutorial)\n            })\n        }\n\n        options = Array.from(options)\n        options.map((item, index) => {\n            optionRender.push(<Option key={index} value={item}>{item}</Option>)\n        })\n\n        return optionRender\n\n    }\n\n    async searchTable(e) {\n        let value = e.target.value\n        let filteredList = this.state.tutorialsInTable\n        filteredList = await filteredList.filter(item => {\n            let booltut = item.tutorial.toLowerCase().includes(value.toLowerCase())\n            let boolfoss = item.foss.toLowerCase().includes(value.toLowerCase())\n            let boollang = item.language.toLowerCase().includes(value.toLowerCase())\n            let boolstatus = item.submission_status.toLowerCase().includes(value.toLowerCase())\n\n            return booltut || boollang || boolfoss || boolstatus\n        })\n        this.setState({searchFilteredTable: filteredList, searchBox: value})\n\n    }\n\n    componentDidMount() {\n        let filtered_tuts = []\n        let fosses = new Set()\n        let tutorials = new Set()\n        let langs = new Set()\n        axios.get(`${process.env.REACT_APP_API_URL}/tutorials`)\n            .then(res => {\n                let data = res.data\n                data.map((tutorial) => {\n                    let tut_obj = {};\n                    tut_obj.key = tutorial.tutorial_detail.id\n                    tut_obj.foss = tutorial.foss_category.name\n                    tut_obj.tutorial = tutorial.tutorial_detail.tutorial\n                    tut_obj.language = tutorial.language.name\n                    tut_obj.isEdited = false\n                    tut_obj.tutorial_id = tutorial.tutorial_detail.id\n                    tut_obj.language_id = tutorial.language.id\n                    tut_obj.submission_status = 'not_initialized'\n                    tut_obj.button = <Popconfirm onConfirm={\n                        () => this.handleSubmit(\n                            tutorial.tutorial_detail.id,\n                            tutorial.language.id)\n                    } title=\"Are you sure?\" okText=\"Yes\" cancelText=\"No\">\n                        <Button size={'large'} icon={<EditOutlined/>}\n                        >Edit\n                            Video</Button></Popconfirm>\n                    filtered_tuts.push(tut_obj)\n                    fosses.add(tut_obj.foss)\n                    tutorials.add(tut_obj.tutorial)\n                    langs.add(tut_obj.language)\n                    return filtered_tuts\n                    // this.setState({tutorials: existing_tut})\n                })\n            }).then(() => {\n            axios.get(`${process.env.REACT_APP_API_URL}/process_tutorials`)\n                .then(res => {\n                    let data = res.data\n                    data.map((tut) => {\n                        // console.log(tut)\n                        for (let i = 0; i < filtered_tuts.length; i++) {\n                            if (filtered_tuts[i].tutorial_id === tut.tutorial_detail && filtered_tuts[i].language_id === tut.language) {\n                                filtered_tuts[i].isEdited = true\n                                filtered_tuts[i].button =\n                                    <Button size={'large'} icon={<EyeOutlined/>} href={`#/dashboard?id=${tut.id}`}>Edit\n                                        Video</Button>\n                                filtered_tuts[i].submission_status = tut.submission_status\n                            }\n                        }\n                    })\n\n                })\n                .then(() => {\n                    this.setState({\n                        tutorials: filtered_tuts,\n                        isLoading: false,\n                        filteredTutorials: filtered_tuts,\n                        tutorialsInTable: filtered_tuts\n                    })\n\n\n                })\n        })\n    }\n\n    render() {\n        // console.log(this.props.fosses)\n        return (\n            <div>\n                <Breadcrumb>\n                    <Breadcrumb.Item href=\"/\">\n                        <HomeOutlined/>\n                    </Breadcrumb.Item>\n                    <Breadcrumb.Item>\n                        <VideoCameraOutlined/>\n                        <span>Video Processing</span>\n                    </Breadcrumb.Item>\n                </Breadcrumb>\n                <Divider/>\n                <Row xs={2} sm={4} md={6} lg={10} xl={10}>\n                    <Col span={6} offset={1}>\n                        <Text level={4}>\n                            FOSS &nbsp; &nbsp; &nbsp;\n                        </Text>\n                        <Select\n                            value={this.state.fossDropdownOption}\n                            size='large'\n                            onChange={this.filterFosses}\n                            defaultValue=\"All\"\n                            style={{width: 120}}>\n                            <Option value='All'>All</Option>\n                            {\n                                this.renderOptions('foss')\n                            }\n                        </Select>\n                    </Col>\n                    <Col span={6}>\n                        <Text level={3}>\n                            Tutorial  &nbsp; &nbsp; &nbsp;\n                        </Text>\n                        <Select value={this.state.tutorialDropdownOption}\n                                size='large'\n                                disabled={this.state.isTutDisabled}\n                                style={{width: 120}}\n                                onChange={this.filterTutorials}>\n                            <Option value='All'>All</Option>\n                            {\n                                this.renderOptions('tutorials')\n\n                            }\n                        </Select>\n                    </Col>\n                    <Col span={10}>\n                        <Input allowClear size=\"large\" placeholder=\"Search\" prefix={<SearchOutlined/>}\n                               onChange={this.searchTable}/>\n\n                    </Col>\n                    <Col span={1}/>\n                </Row>\n                <Divider style={{backgroundColor: 'white'}}/>\n                <Table\n                    loading={this.state.isLoading}\n                    dataSource={this.state.searchBox !== '' ? this.state.searchFilteredTable : this.state.tutorialsInTable}\n                    columns={columns}/>\n            </div>\n\n\n        );\n    }\n}\n\n\nexport default withRouter(TutorialsListPage)\n","import React from 'react'\nimport {Button, Result} from \"antd\";\n\nclass MediaNotFound extends React.Component{\n    render() {\n        return(  <Result\n            status=\"warning\"\n            title=\"Media Not Found\"\n            extra={<Button type=\"primary\" href={'#'}>Back Home</Button>}\n        />)\n\n    }\n\n}\n\nexport default MediaNotFound\n","import React from 'react'\nimport {Button, Result} from \"antd\";\n\nclass Error403Component extends React.Component{\n    render() {\n        return(  <Result\n            status=\"404\"\n            title=\"404\"\n            subTitle=\"Sorry, the page you visited does not exist.\"\n            extra={<Button type=\"primary\" href={'#'}>Back Home</Button>}\n        />)\n\n    }\n\n}\n\nexport default Error403Component\n","import React from \"react\";\nimport {Button, Divider, Modal, Popconfirm, Select, Space, Switch, Table, Tabs} from \"antd\";\nimport ReactAudioPlayer from 'react-audio-player';\nimport ReactDiffViewer from 'react-diff-viewer';\nimport './revertModal.styles.css'\n\nconst {TabPane} = Tabs\nconst {Option} = Select\n\n\nclass RevertModal extends React.Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            splitView: true,\n            oldValue: '',\n            newValue: '',\n            oldDropDownValue: 'Select a version',\n            newDropDownValue: 'Select a version',\n        }\n    }\n\n    toggleSplitView = () => {\n        this.setState({splitView: !this.state.splitView})\n    }\n\n    handleChangeCompare = (value, type) => {\n\n        // console.log(value, type)\n        const subtitle = this.props.dataSource[value].subtitle\n\n        if (type === 'old') {\n            this.setState({\n                oldValue: subtitle,\n                oldDropDownValue: `Version ${this.props.dataSource.length - value}`\n            })\n\n        } else {\n            this.setState({\n                newValue: subtitle,\n                newDropDownValue: `Version ${this.props.dataSource.length - value}`\n            })\n        }\n\n    }\n    resetDropdown = () => {\n        this.setState({\n            oldValue: '',\n            newValue: '',\n            oldDropDownValue: 'Select a date',\n            newDropDownValue: 'Select a date'\n        })\n    }\n\n\n\n    render() {\n\n        const {revertModalVisible, revertHandleCancel, isLoading, dataSource, revertChunk, chunk_no} = this.props\n\n        const columns = [\n            {\n                title: 'Version',\n                key: 'index',\n                render: (text, record, index) => this.props.dataSource.length - index,\n                sortDirections: ['descend', 'ascend']\n            },\n            {\n                title: 'Date',\n                dataIndex: 'history_date',\n                key: 'history_date',\n                render: (date) => {\n                    const d = new Date(date)\n                    const date_time = `${d.toDateString()} ${d.toTimeString().split(' ')[0]}`\n                    return date_time\n                }\n            },\n            {\n                title: 'Subtitle',\n                dataIndex: 'subtitle',\n                key: 'subtitle',\n            },\n            {\n                title: 'Audio',\n                dataIndex: 'audio_chunk',\n                key: 'audio_chunk',\n                render: (audio_chunk) => {\n                    return (<ReactAudioPlayer\n                        src={`${process.env.REACT_APP_MEDIA_URL}/${audio_chunk}`}\n                        controls\n                        controlsList=\"nodownload\"\n                    />)\n                }\n            },\n\n            {\n                title: 'Revert',\n                render: (value, record, index) => (\n                    <Popconfirm\n                        onConfirm={() => revertChunk(value.history_id, chunk_no)} title=\"Are you sure?\"\n                        okText=\"Yes\"\n                        cancelText=\"No\"\n                        disabled={index === 0}\n                    >\n                        <Button size='middle' type=\"primary\"\n                                disabled={index === 0}>Revert</Button>\n                    </Popconfirm>\n                )\n            },\n        ];\n\n        return (\n            <Modal className='revertModal' footer={null}\n                   title=\"Revisions\"\n                   visible={revertModalVisible}\n                   onCancel={() => {\n                       revertHandleCancel()\n                       this.resetDropdown()\n                   }}\n                   width='60%'\n\n            >\n                <Tabs size='large' type=\"card\">\n                    <TabPane tab=\"Revert\" key=\"1\">\n                        <Table loading={isLoading} columns={columns} dataSource={dataSource}/>\n\n                    </TabPane>\n                    <TabPane tab=\"Compare\" key=\"2\">\n                        <Space style={{width: '88%'}} size='large' align='baseline'>\n                            <Select\n                                value={this.state.oldDropDownValue}\n                                onChange={(e) => this.handleChangeCompare(e, 'old')} style={{width: 240}}>\n                                {\n                                    dataSource.map((item, idx) => {\n                                        // console.log(item)\n                                        return (<Option\n\n                                            key={item.history_id}\n                                            value={idx}>\n                                            {`Version ${this.props.dataSource.length - idx}`}\n                                        </Option>)\n                                    })\n                                }\n                            </Select>\n                            With\n                            <Select\n                                value={this.state.newDropDownValue}\n                                onChange={(e) => this.handleChangeCompare(e, 'new')}\n                                style={{width: 240}}>\n                                {\n                                    dataSource.map((item, idx) => {\n                                        // console.log(item)\n                                        return (<Option\n                                            key={item.history_id}\n                                            value={idx}>\n                                            {`Version ${this.props.dataSource.length - idx}`}\n                                        </Option>)\n                                    })\n                                }\n                            </Select>\n\n                        </Space>\n                        <Space style={{width: '12%'}} align='end'>\n                            Split View\n                            <Switch onChange={this.toggleSplitView} defaultChecked/> </Space>\n                        <Divider/>\n\n                        <ReactDiffViewer oldValue={this.state.oldValue} newValue={this.state.newValue}\n                                         splitView={this.state.splitView}/>\n                    </TabPane>\n                </Tabs>\n\n            </Modal>\n        )\n    }\n\n}\n\n\nexport default RevertModal\n","import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport qs from 'qs'\nimport { ReactMic } from 'react-mic';\nimport { Player } from 'video-react';\nimport \"../../../node_modules/video-react/dist/video-react.css\"; // import css\nimport axios from 'axios'\nimport {\n    Breadcrumb,\n    Button,\n    Col,\n    Divider,\n    Input,\n    Modal,\n    notification,\n    Progress,\n    Result,\n    Row,\n    Skeleton,\n    Space,\n    Spin,\n    Table,\n    Tabs,\n    Timeline,\n    Typography,\n} from 'antd';\nimport ReactAudioPlayer from 'react-audio-player';\nimport ReactPlayer from \"react-player\";\nimport {\n    AudioOutlined,\n    CaretRightOutlined,\n    HomeOutlined,\n    LoadingOutlined,\n    MessageOutlined,\n    PauseOutlined,\n    RollbackOutlined,\n    SendOutlined,\n    VideoCameraOutlined\n} from '@ant-design/icons'\nimport MediaNotFound from \"../../components/errors/mediaNotFound\";\nimport Error403Component from \"../../components/errors/error403.component\";\nimport './dashboard.page.css'\nimport RevertModal from \"../../components/revertModal/revertModal.component\";\nimport 'react-dropzone-uploader/dist/styles.css'\nimport Dropzone from 'react-dropzone-uploader'\n\nconst { Title, Text } = Typography;\nconst { TabPane } = Tabs\n\n\nclass Dashboard extends React.Component {\n    warning\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: '',\n            current_count: '',\n            chunks: [],\n            status: 'loading',\n            checksum: '',\n            foss: '',\n            tutorial_name: '',\n            language: '',\n            total_count: '',\n            processed_video: '',\n            processed: false,\n            progress_status: '',\n            visible: false,\n            audio_file: '',\n            uploading: false,\n            selected_chunk: 0,\n            selected_chunk_sub: '',\n            playing: false,\n            revertModalVisible: false,\n            revisionData: [],\n            revisionsTableLoading: true,\n            revertChunkSelected: '',\n            subtitle: '',\n            downloadURL: '',\n            currentRunningChunk: null,\n            isUploadDisabled: true,\n            remove: () => {\n                // console.log('nothing to remove')\n            },\n            record: false,\n            submission_status: '',\n            isCommentVisible: false,\n            isSubmitVisible: false,\n            comment_temp: '',\n            comment: ''\n        }\n        this.handleChange = (e) => {\n            let value = e.target.value\n            this.setState({ selected_chunk_sub: value, isUploadDisabled: false });\n\n        }\n        this.revertShowModal = (chunk_no) => {\n            this.setState({ revertModalVisible: true, revisionData: [], revertChunkSelected: chunk_no })\n            axios.get(`${process.env.REACT_APP_API_URL}/process_tutorials/${this.state.id}/${chunk_no}`)\n                .then((res) => {\n                    // console.log(res.data.history)\n                    this.setState({ revisionData: res.data.history })\n\n                })\n                .then(() => {\n                    this.setState({ revisionsTableLoading: false })\n                })\n        }\n        this.openNotificationWithIcon = (title, message, type) => {\n            notification[type]({\n                message: title,\n                description: message\n            });\n        };\n\n        this.handleChangeStatus = ({ meta, file, remove }, status) => {\n            if (status !== 'rejected_file_type') {\n                this.setState({ audio_file: file, remove: remove, isUploadDisabled: false })\n            } else {\n                this.openNotificationWithIcon('Unsupported File', 'You can only upload .mp3 files', 'warning')\n            }\n        };\n        this.handleUpload = () => {\n            this.setState({\n                uploading: true,\n                progress_status: 'normal',\n                status: 'Uploading'\n            });\n            const { audio_file, selected_chunk, selected_chunk_sub } = this.state;\n            // console.log(audio_file)\n            const formData = new FormData();\n            if (audio_file) {\n                formData.append('audio_chunk', audio_file);\n            }\n            formData.append('subtitle', selected_chunk_sub)\n            axios.put(`${process.env.REACT_APP_API_URL}/process_tutorials/${this.state.id}/${selected_chunk}`, formData)\n                .then(() => {\n                    this.fetchData();\n                    this.setState({ uploading: false });\n                })\n                .then(() => this.handleCancel())\n                .catch((error) => {\n                    // console.log(error.response)\n                    this.setState({ uploading: false, status: 'done' });\n                    this.handleCancel()\n                    this.openNotificationWithIcon('Duplicate File', 'You have already uploaded this audio, Simply revert back', 'warning')\n\n                })\n        };\n\n        this.columns = [\n            {\n                title: 'Chunk No.',\n                dataIndex: 'chunk_no',\n                key: 'chunk_no',\n                width: '5%'\n\n            },\n            {\n                title: 'Audio',\n                dataIndex: 'audio_chunk',\n                key: 'audio_chunk',\n                width: '10%',\n                render: (audio_chunk) => {\n                    return (<ReactAudioPlayer\n                        src={audio_chunk}\n                        controls\n                    />)\n                },\n            },\n            {\n                title: 'Start Time',\n                dataIndex: 'start_time',\n                key: 'start_time',\n                width: '10%',\n\n\n            },\n            {\n                title: 'End Time',\n                dataIndex: 'end_time',\n                key: 'end_time',\n                width: '10%',\n\n            },\n            {\n                title: 'Subtitle',\n                dataIndex: 'subtitle',\n                key: 'subtitle',\n                width: '55%',\n                // render: (value) => {\n                //     return (ReactHtmlParser(value))\n                // },\n                sorter: (a, b) => a.subtitle.localeCompare(b.subtitle),\n                sortDirections: ['descend', 'ascend']\n            },\n            {\n                title: 'Change Audio/Subtitle',\n                width: '10%',\n                render: (value) => {\n                    return (<Button icon={<AudioOutlined />} onClick={() => this.changeAudioShowModal(value.chunk_no)}\n                        disabled={this.state.status !== 'done'|| this.state.submission_status === 'submitted' || this.state.submission_status === 'accepted'}>Change\n                            Audio / Subtitle</Button>\n                    )\n                }\n            },\n            {\n                title: 'Revert',\n                width: '10%',\n                render: (value) => {\n                    // console.log(value.revisions)\n                    return (<Button icon={<RollbackOutlined />}\n                        onClick={() => this.revertShowModal(value.chunk_no)}\n                        disabled={value.revisions <= 1 || this.state.status !== 'done' || this.state.submission_status === 'submitted' || this.state.submission_status === 'accepted'}>Revert </Button>\n                    )\n                }\n            },\n        ];\n        this.changeAudioShowModal = (chunk) => {\n            this.state.remove()\n            let sutitle = this.state.chunks[chunk]['subtitle']\n            let current_chunk = chunk - 1 >= 0 ? chunk - 1 : chunk\n            let start_time = this.state.chunks[current_chunk]['start_time']\n\n            setTimeout((chunk) => {\n                let a = start_time.split(':');\n                let seconds = (+a[0]) * 60 * 60 + (+a[1]) * 60 + (+a[2]);\n                // console.log(seconds)\n                this.player.seekTo(seconds, 'seconds')\n                // this.player.showPreview()\n\n            }, 500)\n            this.setState({\n                visible: true,\n                selected_chunk: chunk,\n                selected_chunk_sub: sutitle,\n                isUploadDisabled: true\n            });\n        };\n\n        this.handleOk = e => {\n            // console.log(e);\n            this.setState({\n                visible: false,\n            });\n        };\n\n        this.revertHandleCancel = () => {\n            this.setState({ revertModalVisible: false })\n        }\n\n        this.revertChunk = (history_id, chunk_no) => {\n            this.setState({\n                uploading: true,\n                progress_status: 'normal',\n                status: 'Reverting',\n            });\n            axios.put(`${process.env.REACT_APP_API_URL}/process_tutorials/${this.state.id}/${chunk_no}/revert/${history_id}`)\n                .then(() => {\n                    this.fetchData();\n                    this.setState({ uploading: false });\n                })\n                .then(() => this.revertHandleCancel())\n\n        }\n\n        this.handleCancel = e => {\n\n            // console.log(e);\n            this.setState({ playing: false })\n            this.setState({\n                audio_file: '',\n                visible: false,\n            });\n        };\n\n        this.fetchData = () => {\n            this.setState({ processed: false })\n            this.apiLoop = setInterval(() => {\n                axios.get(`${process.env.REACT_APP_API_URL}/process_tutorials/${this.state.id}`)\n                    .then((res) => {\n                        // console.log(res.data)\n                        this.setState({\n                            current_count: res.data.chunks.length,\n                            chunks: res.data.chunks,\n                            total_count: res.data.video_data.total_chunks,\n                            tutorial_name: res.data.video_data.tutorial_name,\n                            language: res.data.video_data.language,\n                            foss: res.data.video_data.foss,\n                            status: res.data.video_data.status,\n                            checksum: res.data.video_data.checksum,\n                            submission_status: res.data.video_data.submission_status,\n                            comment: res.data.video_data.comment\n                        });\n                        if (res.data.video_data.processed_video === null) {\n                            this.setState(\n                                {\n                                    'processed_video': res.data.video_data.video\n                                }\n                            )\n                        } else {\n                            this.setState({\n                                'processed_video': res.data.video_data.processed_video,\n                                'subtitle': res.data.video_data.subtitle\n                            })\n                        }\n                        if (res.data.video_data.status === 'done' || res.data.video_data.status === 'error' || res.data.video_data.status === 'media_not_found') {\n                            clearInterval(this.apiLoop);\n                            this.setState({ processed: true })\n                        }\n                    })\n                    .catch((error) => {\n                        notification.error({\n                            message: 'Error Occurred',\n                            description: error.response ? `Status: ${error.response.status} \\n ${error.response.statusText}` : 'Some Error Occurred',\n                            onClick: () => {\n                                // console.log('Notification Clicked!');\n                            },\n                        });\n                        this.setState({ status: 'not found', progress_status: 'exception' })\n\n                        clearInterval(this.apiLoop)\n                    })\n            }, 2000)\n\n        }\n\n\n    }\n\n    ref = player => {\n        this.player = player\n    }\n\n    togglePlayButton = () => {\n        let status = this.state.playing\n        status ? this.setState({ playing: false }) : this.setState({ playing: true })\n    }\n\n    closeCommentModal = () => {\n        this.setState({\n            isCommentVisible: false\n        })\n    }\n\n    pauseVideo = video => {\n        let chunk = this.state.selected_chunk\n        let current_running_chunk = chunk - 1 >= 0 ? chunk - 1 : chunk\n\n        let start_time = this.state.chunks[current_running_chunk]['start_time']\n        let a = start_time.split(':');\n        let start_seconds = (+a[0]) * 60 * 60 + (+a[1]) * 60 + (+a[2]);\n        let total_chunks = this.state.total_count\n\n        let end_time = chunk + 1 < total_chunks ? this.state.chunks[chunk + 1]['end_time'] : this.state.chunks[chunk]['end_time']\n        a = end_time.split(':');\n        let end_seconds = (+a[0]) * 60 * 60 + (+a[1]) * 60 + (+a[2]);\n        // this.player.showPreview()\n\n        // now change the current running chunk here\n        if (chunk - 1 < 0) {\n            //no prevous\n            let { playedSeconds } = video;\n\n            let current = this.state.chunks[chunk]['end_time'];\n            a = current.split(':')\n            let currentSeconds = (+a[0]) * 60 * 60 + (+a[1]) * 60 + (+a[2]);\n\n            let next = this.state.chunks[chunk + 1]['end_time'];\n            a = next.split(':')\n            let nextSeconds = (+a[0]) * 60 * 60 + (+a[1]) * 60 + (+a[2]);\n\n\n            if (playedSeconds > 0 && playedSeconds < currentSeconds) {\n                this.setState({ currentRunningChunk: chunk })\n            }\n            if (playedSeconds > currentSeconds && playedSeconds < nextSeconds) {\n                // console.log('hello')\n                this.setState({ currentRunningChunk: chunk + 1 })\n            }\n        } else if (chunk + 1 >= total_chunks) {\n            //no next\n            let { playedSeconds } = video;\n\n            let prev = this.state.chunks[chunk - 1]['end_time'];\n            let a = prev.split(':')\n            let prevSeconds = (+a[0]) * 60 * 60 + (+a[1]) * 60 + (+a[2]);\n\n            let current = this.state.chunks[chunk]['end_time'];\n            a = current.split(':')\n            let currentSeconds = (+a[0]) * 60 * 60 + (+a[1]) * 60 + (+a[2]);\n\n\n            if (playedSeconds > 0 && playedSeconds < prevSeconds) {\n                this.setState({ currentRunningChunk: chunk - 1 })\n            }\n\n            if (playedSeconds > prevSeconds && playedSeconds < currentSeconds) {\n                this.setState({ currentRunningChunk: chunk })\n            }\n\n        } else {\n            //both\n            let { playedSeconds } = video;\n            // console.log('ksdflkdjflkdsjflkdsjflkdjfldkfj')\n\n            let prev = this.state.chunks[chunk - 1]['end_time'];\n            let a = prev.split(':')\n            let prevSeconds = (+a[0]) * 60 * 60 + (+a[1]) * 60 + (+a[2]);\n\n            let current = this.state.chunks[chunk]['end_time'];\n            a = current.split(':')\n            let currentSeconds = (+a[0]) * 60 * 60 + (+a[1]) * 60 + (+a[2]);\n\n            let next = this.state.chunks[chunk + 1]['end_time'];\n            a = next.split(':')\n            let nextSeconds = (+a[0]) * 60 * 60 + (+a[1]) * 60 + (+a[2]);\n            if (playedSeconds > 0 && playedSeconds < prevSeconds) {\n                this.setState({ currentRunningChunk: chunk - 1 })\n            }\n\n            if (playedSeconds > prevSeconds && playedSeconds < currentSeconds) {\n                this.setState({ currentRunningChunk: chunk })\n            }\n            if (playedSeconds > currentSeconds && playedSeconds < nextSeconds) {\n                // console.log('hello')\n                this.setState({ currentRunningChunk: chunk + 1 })\n            }\n\n\n        }\n\n\n        if (Math.floor(video.playedSeconds) === end_seconds) {\n            this.setState({ playing: false })\n            this.player.seekTo(start_seconds, 'seconds')\n        }\n    }\n\n    startRecording = () => {\n        this.setState({ record: true });\n    }\n\n    stopRecording = () => {\n        this.setState({ record: false });\n    }\n\n    onData(recordedBlob) {\n        // console.log('chunk of real-time data is: ', recordedBlob);\n    }\n\n    onSave = async (blobObject) => {\n        let file = await new File([blobObject.blob], \"record.webm\");\n        this.setState({ downloadURL: blobObject.blobURL })\n        this.setState({ audio_file: file, isUploadDisabled: false })\n    }\n\n    showComment = () => {\n        this.setState({\n            isCommentVisible: true\n        })\n    }\n\n\n    onStop(recordedBlob) {\n        // console.log('recordedBlob is: ', recordedBlob);\n    }\n\n\n    componentWillMount() {\n        let id = qs.parse(this.props.location.search, { ignoreQueryPrefix: true }).id\n        this.setState({ id: id })\n\n    }\n\n    componentDidMount() {\n        this.fetchData()\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.apiLoop)\n    }\n\n\n    submitTutorial = () => {\n        const formData = new FormData();\n        formData.append('comment', this.state.comment_temp)\n        axios.post(`${process.env.REACT_APP_API_URL}/process_tutorials/${this.state.id}/submit`, formData)\n            .then(() => {\n                this.openNotificationWithIcon('Submitted', 'Tutorial Submitted Successfully', 'success')\n            })\n            .then(() => {\n                this.setState({ submission_status: 'submitted' })\n                this.closeSubmitModal()\n            })\n            .catch(() => {\n                this.openNotificationWithIcon('Error', 'Some Error Occurred', 'error')\n            })\n    }\n\n    closeSubmitModal = () => {\n        this.setState({ isSubmitVisible: false })\n    }\n\n    showSubmitModal = () => {\n        this.setState({ isSubmitVisible: true })\n    }\n\n\n    render() {\n        const { uploading, audio_file } = this.state;\n        let status_text\n        if (this.state.submission_status === 'draft')\n            status_text = <Title level={4}>Draft</Title>\n        if (this.state.submission_status === 'submitted')\n            status_text = <Title level={4} type=\"warning\">Submitted for Review</Title>\n        else if (this.state.submission_status === 'accepted')\n            status_text = <Title level={4} style={{ color: '#52c41a' }}>Accepted</Title>\n        else if (this.state.submission_status === 'rejected')\n            status_text = <Title level={4} type=\"danger\">Rejected</Title>\n\n        let status = this.state.status\n        if (status === 'loading') {\n            return (\n                <Result\n                    icon={<LoadingOutlined />}\n                    title=\"Fetching Files\"\n                />\n\n            )\n        } else if (status === 'not found') {\n            return (<Error403Component />)\n        } else if (status === 'media_not_found') {\n            return (<MediaNotFound />)\n        } else {\n            return (\n                <div>\n                    <Breadcrumb>\n                        <Breadcrumb.Item href=\"/\">\n                            <HomeOutlined />\n                        </Breadcrumb.Item>\n                        <Breadcrumb.Item href=\"#/\">\n                            <VideoCameraOutlined />\n                            <span>Video Processing</span>\n                        </Breadcrumb.Item>\n                        <Breadcrumb.Item>\n                            <span>Dashboard</span>\n                        </Breadcrumb.Item>\n                    </Breadcrumb>\n                    <Row align=\"middle\">\n                        <Col xs={2} sm={4} md={4} lg={4} xl={4}\n                            style={{ display: 'inline-flex', justifyContent: 'center', alignItems: 'center' }}>\n                            <Progress type=\"circle\"\n                                percent={parseInt((this.state.current_count / this.state.total_count) * 100)}\n                                status={this.state.progress_status} />\n                        </Col>\n                        <Col xs={2} sm={4} md={4} lg={4} xl={4}\n                            style={{ display: 'inline-flex', justifyContent: 'center', alignItems: 'center' }}\n                        >\n                            <Typography>\n                                {\n                                    this.state.status === 'done' ? null : <Spin size=\"large\" />\n\n                                }\n                                {/*<Title level={4}>{this.state.submission_status.toUpperCase()}</Title>*/}\n                                {status_text}\n                                <Title>\n                                    <Button\n                                        onClick={this.showSubmitModal}\n                                        disabled={this.state.submission_status === 'submitted' || this.state.submission_status === 'accepted' }\n                                        icon={<SendOutlined />} type='primary'>Submit for Review</Button>\n                                    <Button onClick={this.showComment}\n                                        disabled={this.state.submission_status === 'submitted' || this.state.submission_status === 'accepted'}\n                                        icon={<MessageOutlined />}>View Comment</Button>\n                                </Title>\n\n\n                            </Typography>\n                        </Col>\n\n                        <Col style={{ display: 'inline-flex', justifyContent: 'center', alignItems: 'center' }}\n                            xs={2} sm={8} md={8} lg={8} xl={8}>\n                            <Typography>\n                                <Title level={3}>{this.state.tutorial_name}</Title>\n                                <Title level={4}>{this.state.foss}</Title>\n                            </Typography>\n                        </Col>\n\n                        <Col style={{ display: 'inline-flex', justifyContent: 'center', alignItems: 'center' }}\n                            xs={2} sm={8} md={8} lg={8} xl={8}>\n\n                            {\n                                this.state.status === 'done' ?\n                                    <Player\n                                        fluid={false}\n                                        preload='auto'\n                                        height={200}\n                                        playsInline\n                                        src={this.state.processed_video}\n                                    />\n\n\n                                    // <VideoPlayer\n                                    //     autoplay={false}\n                                    //     controls={true}\n                                    //     preload=\"auto\"\n                                    //     // width={200}\n                                    //     sources={[{\n                                    //         src: this.state.processed_video,\n                                    //         type: 'video/mp4'\n                                    //     }]}\n                                    // />\n                                    :\n                                    <Skeleton.Input style={{ height: '200px' }} active />\n                            }\n\n\n                        </Col>\n\n                    </Row>\n                    <Row>\n                        <Table\n                            className='data-table'\n                            dataSource={this.state.chunks}\n                            columns={this.columns} />\n                    </Row>\n\n                    <Modal\n                        title=\"Change Audio\"\n                        visible={this.state.visible}\n                        onOk={this.handleOk}\n                        okButtonProps={{\n                            type: \"primary\",\n                            onClick: this.handleUpload,\n                            disabled: this.state.isUploadDisabled,\n                            loading: uploading,\n                            style: { marginTop: 16 }\n                        }\n                        }\n                        okText={uploading ? 'Uploading' : 'Start Upload'}\n                        onCancel={this.handleCancel}\n                        width={'60%'}\n                    >\n                        <Row gutter={24}>\n                            <Col span={6}>\n                                <Timeline mode='left'>\n                                    {this.state.selected_chunk - 1 >= 0 && status === 'done' ?\n                                        <Timeline.Item\n                                            className={this.state.selected_chunk - 1 === this.state.currentRunningChunk && this.state.playing ? 'selected-chunk' : null}\n                                            label={<h4>Previous Chunk</h4>}>\n                                            {this.state.chunks[this.state.selected_chunk - 1].subtitle}\n                                        </Timeline.Item> : null\n                                    }\n                                    {\n                                        status === 'done' ?\n                                            <Timeline.Item\n                                                className={this.state.selected_chunk === this.state.currentRunningChunk && this.state.playing ? 'selected-chunk' : null}\n                                                label={<h4>Current\n                                                    Chunk</h4>}>{this.state.selected_chunk_sub}</Timeline.Item> :\n                                            null\n\n                                    }\n\n                                    {\n                                        this.state.selected_chunk + 1 < this.state.total_count && status === 'done' ?\n                                            <Timeline.Item\n                                                className={this.state.selected_chunk + 1 === this.state.currentRunningChunk && this.state.playing ? 'selected-chunk' : null}\n                                                label={<h4>Next Chunk</h4>}>\n                                                {this.state.chunks[this.state.selected_chunk + 1].subtitle}\n                                            </Timeline.Item> : null\n\n                                    }\n                                </Timeline>\n                            </Col>\n                            <Col span={8}>\n\n                                <ReactPlayer\n                                    preload='auto'\n                                    controls={false}\n                                    playing={this.state.playing}\n                                    onProgress={this.pauseVideo}\n                                    ref={this.ref}\n                                    width='100%'\n                                    url={this.state.processed_video} />\n\n                                <br />\n                                <div style={{ textAlign: 'center' }}>\n\n                                    <Button\n                                        size='large'\n                                        type=\"primary\"\n                                        shape=\"round\"\n                                        icon={this.state.playing ? <PauseOutlined /> : <CaretRightOutlined />}\n                                        onClick={this.togglePlayButton}\n                                    >{this.state.playing ? 'Pause' : 'Play'}</Button>\n                                </div>\n                            </Col>\n                            <Col span={10}>\n                                <Tabs size='large' type=\"card\">\n                                    <TabPane tab=\"Upload\" key=\"1\">\n                                        <Dropzone\n                                            initialFiles={[]}\n                                            canRemove={false}\n                                            className=\"fileUploader\"\n                                            onChangeStatus={this.handleChangeStatus}\n                                            accept=\".mp3\"\n                                            multiple={false}\n                                            autoUpload={false}\n                                            maxFiles={1}\n                                            inputContent=\"Drag Audio or Click to Browse\"\n                                        />\n                                    </TabPane>\n                                    <TabPane tab=\"Record\" key=\"2\">\n                                        <div>\n                                            <ReactMic\n                                                record={this.state.record}\n                                                className=\"sound-wave\"\n                                                onStop={this.onStop}\n                                                onData={this.onData}\n                                                onSave={this.onSave}\n                                                strokeColor=\"#000000\"\n                                                backgroundColor=\"white\"\n\n\n                                            />\n                                            <Space>\n                                                <Button type=\"primary\" shape=\"round\"\n                                                    onClick={this.startRecording}\n                                                    disabled={this.state.record === true}\n                                                > Start </Button>\n                                                <Button type=\"primary\" shape=\"round\"\n                                                    onClick={this.stopRecording}\n                                                    disabled={this.state.record === false}\n\n                                                > Stop </Button>\n                                                <Button type=\"primary\" shape=\"round\"\n                                                    disabled={this.state.downloadURL === ''}\n                                                    href={this.state.downloadURL}\n                                                    download=\"recording.webm\">Download</Button>\n                                            </Space>\n                                            {this.state.downloadURL ?\n                                                <div>\n                                                    <Divider />\n\n                                                    <ReactAudioPlayer\n                                                        src={this.state.downloadURL}\n                                                        controls\n                                                    />\n                                                </div>\n                                                : null}\n\n                                        </div>\n                                    </TabPane>\n                                </Tabs>\n\n                                <Divider />\n                                <Text>Subititle</Text>\n                                {\n                                    status === 'done' ?\n                                        <Input.TextArea allowClear\n                                            autoSize\n                                            value={this.state.selected_chunk_sub}\n                                            onChange={this.handleChange}\n                                        />\n                                        :\n                                        null\n\n\n                                }</Col>\n                        </Row>\n\n\n                    </Modal>\n\n                    <RevertModal\n                        revertModalVisible={this.state.revertModalVisible}\n                        revertHandleCancel={this.revertHandleCancel}\n                        dataSource={this.state.revisionData}\n                        isLoading={this.state.revisionsTableLoading}\n                        chunk_no={this.state.revertChunkSelected}\n                        revertChunk={this.revertChunk}\n                    />\n\n                    <Modal\n                        title=\"Comment from Reviewer\"\n                        visible={this.state.isCommentVisible}\n                        onOk={this.closeCommentModal}\n                        onCancel={this.closeCommentModal}\n                    >\n                        <Typography.Paragraph>\n                            {this.state.comment}\n                        </Typography.Paragraph>\n                    </Modal>\n                    <Modal\n                        width={'40vw'}\n                        title=\"Submit for Review\"\n                        visible={this.state.isSubmitVisible}\n                        onOk={this.submitTutorial}\n                        onCancel={this.closeSubmitModal}\n                        okText='Submit'\n                    >\n                        <Typography.Text>Message to Reviewer</Typography.Text>\n                        <Input.TextArea allowClear\n                            autoSize={{ minRows: 3, maxRows: 4 }}\n                            rows={4}\n                            onChange={(e) => {\n                                this.setState({ comment_temp: e.target.value })\n                            }}\n                        />\n                        <br />\n                        <br />\n\n                    </Modal>\n\n                </div>\n\n            )\n        }\n    }\n\n\n}\n\nexport default withRouter(Dashboard)\n","import React from 'react';\nimport './App.css';\nimport TutorialsListComponent from \"./pages/tutorialsList/tutorialsList.page\";\nimport {Route, Switch} from 'react-router-dom';\nimport Dashboard from \"./pages/dashboard/dashboard.page\";\nimport {instanceOf} from 'prop-types';\nimport {Cookies, withCookies} from 'react-cookie';\nimport axios from \"axios\";\n\nclass App extends React.Component {\n    static propTypes = {\n        cookies: instanceOf(Cookies).isRequired\n    };\n\n\n    constructor(props) {\n        super(props);\n\n        const {cookies} = props;\n        this.state = {\n            csrftoken: cookies.get('csrftoken')\n        };\n        axios.defaults.headers.common['X-CSRFToken'] = this.state.csrftoken // for all requests\n\n    }\n\n\n\n\n    render() {\n        return (\n            <div className='App'>\n                <Switch>\n                    <Route exact path='/' component={TutorialsListComponent}/>\n                    <Route path='/dashboard' component={Dashboard}/>\n                </Switch>\n            </div>\n\n        )\n    };\n}\n\n\nexport default withCookies(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from \"react-router-dom\";\nimport {CookiesProvider} from 'react-cookie';\n\nReactDOM.render(\n    <HashRouter>\n        <CookiesProvider>\n            <App/>\n        </CookiesProvider>\n    </HashRouter>\n    ,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}